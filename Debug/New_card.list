
New_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db0  08005db0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08005e28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08005e28  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141cc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282d  00000000  00000000  0003426c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00036aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002270e  00000000  00000000  00038398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102b5  00000000  00000000  0005aaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6063  00000000  00000000  0006ad5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130dbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c54  00000000  00000000  00130e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ba4 	.word	0x08005ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ba4 	.word	0x08005ba4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 ff61 	bl	8001432 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f834 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8fc 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8c4 	bl	8000704 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800057c:	f000 f884 	bl	8000688 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000580:	4811      	ldr	r0, [pc, #68]	; (80005c8 <main+0x60>)
 8000582:	f000 fced 	bl	8000f60 <RetargetInit>
  RC522_Init();
 8000586:	f000 f95b 	bl	8000840 <RC522_Init>
  HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
 800058a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800058e:	2217      	movs	r2, #23
 8000590:	490e      	ldr	r1, [pc, #56]	; (80005cc <main+0x64>)
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <main+0x60>)
 8000594:	f003 f96c 	bl	8003870 <HAL_UART_Transmit>
  {
	  //	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1);
	  //	  HAL_Delay(500);
	  //	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0);
	  //	  HAL_Delay(500);
	  	  if(!flag_test)
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <main+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d109      	bne.n	80005b4 <main+0x4c>
	  	  {
	  		  HAL_UART_Transmit(&huart2,(uint8_t *) "UART2 Interrupt\r\n", sizeof("UART2 Interrupt\r\n"), 300);
 80005a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80005a4:	2212      	movs	r2, #18
 80005a6:	490b      	ldr	r1, [pc, #44]	; (80005d4 <main+0x6c>)
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <main+0x60>)
 80005aa:	f003 f961 	bl	8003870 <HAL_UART_Transmit>
	  		  flag_test = 1;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0x68>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
	  	  }
	      HAL_Delay(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b8:	f000 ffb0 	bl	800151c <HAL_Delay>
	      printf("\r\nYes ");
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x70>)
 80005be:	f004 fa57 	bl	8004a70 <iprintf>
		  ReaderCard();
 80005c2:	f000 fc2f 	bl	8000e24 <ReaderCard>
	  	  if(!flag_test)
 80005c6:	e7e7      	b.n	8000598 <main+0x30>
 80005c8:	20000100 	.word	0x20000100
 80005cc:	08005bbc 	.word	0x08005bbc
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	08005bd4 	.word	0x08005bd4
 80005d8:	08005be8 	.word	0x08005be8

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fa38 	bl	8004a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f001 fadf 	bl	8001bc4 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f912 	bl	8000834 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000610:	f001 faba 	bl	8001b88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SystemClock_Config+0xa8>)
 8000616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800061a:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <SystemClock_Config+0xa8>)
 800061c:	f023 0318 	bic.w	r3, r3, #24
 8000620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000624:	2314      	movs	r3, #20
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000634:	2360      	movs	r3, #96	; 0x60
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fb15 	bl	8001c70 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800064c:	f000 f8f2 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 ff21 	bl	80024b0 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f8de 	bl	8000834 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000678:	f002 fb14 	bl	8002ca4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067c:	bf00      	nop
 800067e:	3758      	adds	r7, #88	; 0x58
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_SPI1_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_SPI1_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_SPI1_Init+0x74>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_SPI1_Init+0x74>)
 80006a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI1_Init+0x74>)
 80006b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_SPI1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_SPI1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI1_Init+0x74>)
 80006d6:	2207      	movs	r2, #7
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_SPI1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI1_Init+0x74>)
 80006e2:	2208      	movs	r2, #8
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_SPI1_Init+0x74>)
 80006e8:	f002 fbde 	bl	8002ea8 <HAL_SPI_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f89f 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	40013000 	.word	0x40013000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_USART2_UART_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_USART2_UART_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_USART2_UART_Init+0x64>)
 8000710:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART2_UART_Init+0x64>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x64>)
 8000748:	f003 f844 	bl	80037d4 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f86f 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x68>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <MX_USART2_UART_Init+0x68>)
 800075c:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000760:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000100 	.word	0x20000100
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_GPIO_Init+0xbc>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a28      	ldr	r2, [pc, #160]	; (800082c <MX_GPIO_Init+0xbc>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0xbc>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_GPIO_Init+0xbc>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a22      	ldr	r2, [pc, #136]	; (800082c <MX_GPIO_Init+0xbc>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_GPIO_Init+0xbc>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_GPIO_Init+0xbc>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_GPIO_Init+0xbc>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_GPIO_Init+0xbc>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2102      	movs	r1, #2
 80007d2:	4817      	ldr	r0, [pc, #92]	; (8000830 <MX_GPIO_Init+0xc0>)
 80007d4:	f001 f9c0 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_SDA_GPIO_Port, RC522_SDA_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 f9b9 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RC522_RST_Pin */
  GPIO_InitStruct.Pin = RC522_RST_Pin;
 80007e6:	2302      	movs	r3, #2
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RC522_RST_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_GPIO_Init+0xc0>)
 80007fe:	f001 f841 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC522_SDA_Pin */
  GPIO_InitStruct.Pin = RC522_SDA_Pin;
 8000802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RC522_SDA_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f001 f831 	bl	8001884 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	48000400 	.word	0x48000400

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <RC522_Init>:
uint8_t UID[5],Temp[4];
uint8_t RF_Buffer[18];
uint8_t Password_Buffer[6]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}; // Mifare One 缺省密码

void RC522_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	RC522_SDA_LOW;
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <RC522_Init+0x5c>)
 800084c:	f001 f984 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)0xaa, sizeof((uint8_t *)0xaa), 0xFF);//启动传输
 8000850:	23ff      	movs	r3, #255	; 0xff
 8000852:	2204      	movs	r2, #4
 8000854:	21aa      	movs	r1, #170	; 0xaa
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <RC522_Init+0x60>)
 8000858:	f002 fbc9 	bl	8002fee <HAL_SPI_Transmit>
	RC522_SDA_HIGH;
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <RC522_Init+0x5c>)
 8000864:	f001 f978 	bl	8001b58 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 8000868:	2032      	movs	r0, #50	; 0x32
 800086a:	f000 fe57 	bl	800151c <HAL_Delay>
	PcdReset();//复位RC522读卡器
 800086e:	f000 f8ff 	bl	8000a70 <PcdReset>
	HAL_Delay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f000 fe52 	bl	800151c <HAL_Delay>
	PcdReset();//复位RC522读卡器
 8000878:	f000 f8fa 	bl	8000a70 <PcdReset>
	HAL_Delay(10);
 800087c:	200a      	movs	r0, #10
 800087e:	f000 fe4d 	bl	800151c <HAL_Delay>
	PcdAntennaOff();//关闭天线发射
 8000882:	f000 f954 	bl	8000b2e <PcdAntennaOff>
	HAL_Delay(10);
 8000886:	200a      	movs	r0, #10
 8000888:	f000 fe48 	bl	800151c <HAL_Delay>
    PcdAntennaOn();//开启天线发射
 800088c:	f000 f92e 	bl	8000aec <PcdAntennaOn>
	printf("RFID-MFRC522 初始化完成\r\nFindCard Starting ...\r\n");  //测试引脚初始化完成
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <RC522_Init+0x64>)
 8000892:	f004 f973 	bl	8004b7c <puts>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	48000400 	.word	0x48000400
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	08005bf0 	.word	0x08005bf0

080008a8 <delay_ns>:


void delay_ns(uint32_t ns)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t i;
  for(i=0;i<ns;i++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e005      	b.n	80008c2 <delay_ns+0x1a>
  {
	__NOP();
 80008b6:	bf00      	nop
	__NOP();
 80008b8:	bf00      	nop
	__NOP();
 80008ba:	bf00      	nop
  for(i=0;i<ns;i++)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d3f5      	bcc.n	80008b6 <delay_ns+0xe>
//    __nop();
//    __nop();
//    __nop();
  }
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <RC522_ReadWriteByte>:
//TxData:要写入的字节
//返回值:读取到的字节
//***************************************************************************/

char RC522_ReadWriteByte(uint8_t TxData)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	while (SPI_CHECK_FLAG(SPI1->SR,((uint16_t)0x0002)) == RESET) //检查指定的SPI标志位设置与否:发送缓存空标志位
 80008e2:	bf00      	nop
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <RC522_ReadWriteByte+0x40>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d1f9      	bne.n	80008e4 <RC522_ReadWriteByte+0xc>
		{
			;
		}
	SPI1->DR=TxData; 																//通过外设SPIx发送一个数据
 80008f0:	4a09      	ldr	r2, [pc, #36]	; (8000918 <RC522_ReadWriteByte+0x40>)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	60d3      	str	r3, [r2, #12]
		while (SPI_CHECK_FLAG(SPI1->SR,((uint16_t)0x0001)) == RESET) //检查指定的SPI标志位设置与否:接受缓存非空标志位
 80008f6:	bf00      	nop
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <RC522_ReadWriteByte+0x40>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b01      	cmp	r3, #1
 8000902:	d1f9      	bne.n	80008f8 <RC522_ReadWriteByte+0x20>
		{
		}
	return SPI1->DR; 															//返回通过SPIx最近接收的数据
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <RC522_ReadWriteByte+0x40>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	b2db      	uxtb	r3, r3
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40013000 	.word	0x40013000

0800091c <ReadRawRC>:
//功    能：读RC522寄存器
//参数说明：Address[IN]:寄存器地址
//返    回：读出的值
//******************************************************************/
unsigned char ReadRawRC(unsigned char Address)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	uint8_t ucAddr;
  uint8_t ucResult=0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
	RC522_SDA_LOW;
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <ReadRawRC+0x68>)
 8000932:	f001 f911 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000936:	200a      	movs	r0, #10
 8000938:	f000 fdf0 	bl	800151c <HAL_Delay>
   ucAddr = ((Address<<1)&0x7E)|0x80;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	b25b      	sxtb	r3, r3
 8000942:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000946:	b25b      	sxtb	r3, r3
 8000948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800094c:	b25b      	sxtb	r3, r3
 800094e:	73bb      	strb	r3, [r7, #14]
	RC522_ReadWriteByte(ucAddr);
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffc0 	bl	80008d8 <RC522_ReadWriteByte>
	HAL_Delay(10);
 8000958:	200a      	movs	r0, #10
 800095a:	f000 fddf 	bl	800151c <HAL_Delay>
	ucResult=RC522_ReadWriteByte(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffba 	bl	80008d8 <RC522_ReadWriteByte>
 8000964:	4603      	mov	r3, r0
 8000966:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000968:	200a      	movs	r0, #10
 800096a:	f000 fdd7 	bl	800151c <HAL_Delay>
	RC522_SDA_HIGH;
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <ReadRawRC+0x68>)
 8000976:	f001 f8ef 	bl	8001b58 <HAL_GPIO_WritePin>
  return ucResult;
 800097a:	7bfb      	ldrb	r3, [r7, #15]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	48000400 	.word	0x48000400

08000988 <WriteRawRC>:
//功    能：写RC522寄存器
//参数说明：Address[IN]:寄存器地址
//          value[IN]:写入的值
//******************************************************************/
void WriteRawRC(unsigned char Address, unsigned char value)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	71bb      	strb	r3, [r7, #6]
	uint8_t ucAddr;
	RC522_SDA_LOW;
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <WriteRawRC+0x60>)
 80009a0:	f001 f8da 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80009a4:	200a      	movs	r0, #10
 80009a6:	f000 fdb9 	bl	800151c <HAL_Delay>
	ucAddr = ((Address<<1)&0x7E) ;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80009b4:	73fb      	strb	r3, [r7, #15]
	RC522_ReadWriteByte(ucAddr);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff8d 	bl	80008d8 <RC522_ReadWriteByte>
	HAL_Delay(10);
 80009be:	200a      	movs	r0, #10
 80009c0:	f000 fdac 	bl	800151c <HAL_Delay>
	RC522_ReadWriteByte(value);
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff86 	bl	80008d8 <RC522_ReadWriteByte>
	HAL_Delay(10);
 80009cc:	200a      	movs	r0, #10
 80009ce:	f000 fda5 	bl	800151c <HAL_Delay>
	RC522_SDA_HIGH;
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <WriteRawRC+0x60>)
 80009da:	f001 f8bd 	bl	8001b58 <HAL_GPIO_WritePin>
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	48000400 	.word	0x48000400

080009ec <SetBitMask>:
//功    能：置RC522寄存器位
//参数说明：reg[IN]:寄存器地址
//          mask[IN]:置位值
//******************************************************************/
void SetBitMask(unsigned char reg,unsigned char mask)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	71bb      	strb	r3, [r7, #6]
  char tmp = 0x0            ;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
  tmp = ReadRawRC(reg)| mask;
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff8a 	bl	800091c <ReadRawRC>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	73fb      	strb	r3, [r7, #15]
  WriteRawRC(reg,tmp | mask);  // set bit mask
 8000a12:	7bfa      	ldrb	r2, [r7, #15]
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ffb2 	bl	8000988 <WriteRawRC>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <ClearBitMask>:
//功    能：清RC522寄存器位
//参数说明：reg[IN]:寄存器地址
//          mask[IN]:清位值
//******************************************************************/
void ClearBitMask(unsigned char reg,unsigned char mask)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	460a      	mov	r2, r1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	71bb      	strb	r3, [r7, #6]
  char tmp = 0x0              ;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  tmp = ReadRawRC(reg)&(~mask);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff6a 	bl	800091c <ReadRawRC>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b25a      	sxtb	r2, r3
 8000a4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	4013      	ands	r3, r2
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	73fb      	strb	r3, [r7, #15]
  WriteRawRC(reg, tmp)        ;  // clear bit mask
 8000a5a:	7bfa      	ldrb	r2, [r7, #15]
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff91 	bl	8000988 <WriteRawRC>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <PcdReset>:
//******************************************************************/
//功    能：复位RC522
//返    回: 成功返回MI_OK
//******************************************************************/
char PcdReset()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  RC522_RST_HIGH;                             ;
 8000a74:	2201      	movs	r2, #1
 8000a76:	2102      	movs	r1, #2
 8000a78:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <PcdReset+0x78>)
 8000a7a:	f001 f86d 	bl	8001b58 <HAL_GPIO_WritePin>
  delay_ns(10)                             ;
 8000a7e:	200a      	movs	r0, #10
 8000a80:	f7ff ff12 	bl	80008a8 <delay_ns>
  RC522_RST_LOW;                             ;
 8000a84:	2200      	movs	r2, #0
 8000a86:	2102      	movs	r1, #2
 8000a88:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <PcdReset+0x78>)
 8000a8a:	f001 f865 	bl	8001b58 <HAL_GPIO_WritePin>
  delay_ns(100)                             ;
 8000a8e:	2064      	movs	r0, #100	; 0x64
 8000a90:	f7ff ff0a 	bl	80008a8 <delay_ns>
  RC522_RST_HIGH;                             ;
 8000a94:	2201      	movs	r2, #1
 8000a96:	2102      	movs	r1, #2
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <PcdReset+0x78>)
 8000a9a:	f001 f85d 	bl	8001b58 <HAL_GPIO_WritePin>
  delay_ns(10)                           ;
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f7ff ff02 	bl	80008a8 <delay_ns>
  WriteRawRC(CommandReg,PCD_RESETPHASE);
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff6e 	bl	8000988 <WriteRawRC>
  delay_ns(100)                             ;
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f7ff fefb 	bl	80008a8 <delay_ns>
  WriteRawRC(ModeReg,0x3D)             ;//定义发送和接收常用模式 和Mifare卡通讯，CRC初始值0x6363
 8000ab2:	213d      	movs	r1, #61	; 0x3d
 8000ab4:	2011      	movs	r0, #17
 8000ab6:	f7ff ff67 	bl	8000988 <WriteRawRC>
  WriteRawRC(TReloadRegL,30)           ;//16位定时器低位 30
 8000aba:	211e      	movs	r1, #30
 8000abc:	202d      	movs	r0, #45	; 0x2d
 8000abe:	f7ff ff63 	bl	8000988 <WriteRawRC>
  WriteRawRC(TReloadRegH,0)            ;//16位定时器高位
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	202c      	movs	r0, #44	; 0x2c
 8000ac6:	f7ff ff5f 	bl	8000988 <WriteRawRC>
  WriteRawRC(TModeReg,0x8D)            ;//定义内部定时器的设置
 8000aca:	218d      	movs	r1, #141	; 0x8d
 8000acc:	202a      	movs	r0, #42	; 0x2a
 8000ace:	f7ff ff5b 	bl	8000988 <WriteRawRC>
  WriteRawRC(TPrescalerReg,0x3E)       ;//设置定时器分频系数
 8000ad2:	213e      	movs	r1, #62	; 0x3e
 8000ad4:	202b      	movs	r0, #43	; 0x2b
 8000ad6:	f7ff ff57 	bl	8000988 <WriteRawRC>
  WriteRawRC(TxASKReg,0x40)            ;//调制发送信号为100%ASK
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	2015      	movs	r0, #21
 8000ade:	f7ff ff53 	bl	8000988 <WriteRawRC>
  return MI_OK                         ;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	48000400 	.word	0x48000400

08000aec <PcdAntennaOn>:
//******************************************************************/
//开启天线发射
//每次启动或关闭天险发射之间应至少有1ms的间隔
//******************************************************************/
void PcdAntennaOn()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  unsigned char i;
  WriteRawRC(TxASKReg,0x40)       ;
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	2015      	movs	r0, #21
 8000af6:	f7ff ff47 	bl	8000988 <WriteRawRC>
  HAL_Delay(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 fd0e 	bl	800151c <HAL_Delay>
  i = ReadRawRC(TxControlReg)     ;
 8000b00:	2014      	movs	r0, #20
 8000b02:	f7ff ff0b 	bl	800091c <ReadRawRC>
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if(!(i&0x03))
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d103      	bne.n	8000b1c <PcdAntennaOn+0x30>
    SetBitMask(TxControlReg, 0x03);
 8000b14:	2103      	movs	r1, #3
 8000b16:	2014      	movs	r0, #20
 8000b18:	f7ff ff68 	bl	80009ec <SetBitMask>
  i=ReadRawRC(TxASKReg)       ;
 8000b1c:	2015      	movs	r0, #21
 8000b1e:	f7ff fefd 	bl	800091c <ReadRawRC>
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <PcdAntennaOff>:

//******************************************************************/
//关闭天线发射
//******************************************************************/
void PcdAntennaOff()
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  ClearBitMask(TxControlReg, 0x03);
 8000b32:	2103      	movs	r1, #3
 8000b34:	2014      	movs	r0, #20
 8000b36:	f7ff ff79 	bl	8000a2c <ClearBitMask>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <PcdComMF522>:
//          *pOutLenBit[OUT]:返回数据的位长度
//******************************************************************/
char PcdComMF522(unsigned char Command  ,unsigned char *pInData ,
                 unsigned char InLenByte,unsigned char *pOutData,
                 unsigned int  *pOutLenBit                       )
{
 8000b3e:	b590      	push	{r4, r7, lr}
 8000b40:	b089      	sub	sp, #36	; 0x24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	73bb      	strb	r3, [r7, #14]
  char status = MI_ERR                          ;
 8000b50:	23fe      	movs	r3, #254	; 0xfe
 8000b52:	77fb      	strb	r3, [r7, #31]
  unsigned char irqEn   = 0x00                  ;
 8000b54:	2300      	movs	r3, #0
 8000b56:	77bb      	strb	r3, [r7, #30]
  unsigned char waitFor = 0x00                  ;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	777b      	strb	r3, [r7, #29]
  unsigned char lastBits                        ;
  unsigned char n                               ;
  unsigned int  i                               ;
  switch (Command)
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b0c      	cmp	r3, #12
 8000b60:	d006      	beq.n	8000b70 <PcdComMF522+0x32>
 8000b62:	2b0e      	cmp	r3, #14
 8000b64:	d109      	bne.n	8000b7a <PcdComMF522+0x3c>
  {
    case PCD_AUTHENT:
      irqEn   = 0x12                            ;
 8000b66:	2312      	movs	r3, #18
 8000b68:	77bb      	strb	r3, [r7, #30]
      waitFor = 0x10                            ;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	777b      	strb	r3, [r7, #29]
      break                                     ;
 8000b6e:	e005      	b.n	8000b7c <PcdComMF522+0x3e>
    case PCD_TRANSCEIVE:
      irqEn   = 0x77                            ;
 8000b70:	2377      	movs	r3, #119	; 0x77
 8000b72:	77bb      	strb	r3, [r7, #30]
      waitFor = 0x30                            ;
 8000b74:	2330      	movs	r3, #48	; 0x30
 8000b76:	777b      	strb	r3, [r7, #29]
      break                                     ;
 8000b78:	e000      	b.n	8000b7c <PcdComMF522+0x3e>
    default:
      break                                     ;
 8000b7a:	bf00      	nop
  }
  WriteRawRC(ComIEnReg,irqEn|0x80)              ; //
 8000b7c:	7fbb      	ldrb	r3, [r7, #30]
 8000b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4619      	mov	r1, r3
 8000b86:	2002      	movs	r0, #2
 8000b88:	f7ff fefe 	bl	8000988 <WriteRawRC>
  ClearBitMask(ComIrqReg,0x80)                  ;
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	2004      	movs	r0, #4
 8000b90:	f7ff ff4c 	bl	8000a2c <ClearBitMask>
  WriteRawRC(CommandReg,PCD_IDLE)               ;
 8000b94:	2100      	movs	r1, #0
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fef6 	bl	8000988 <WriteRawRC>
  SetBitMask(FIFOLevelReg,0x80)                 ; // 清空FIFO
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f7ff ff24 	bl	80009ec <SetBitMask>
  for(i=0; i<InLenByte; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	e00a      	b.n	8000bc0 <PcdComMF522+0x82>
    WriteRawRC(FIFODataReg,pInData[i])          ; // 数据写入FIFO
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2009      	movs	r0, #9
 8000bb6:	f7ff fee7 	bl	8000988 <WriteRawRC>
  for(i=0; i<InLenByte; i++)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d3f0      	bcc.n	8000baa <PcdComMF522+0x6c>
  WriteRawRC(CommandReg, Command)               ; // 命令写入命令寄存器
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fedb 	bl	8000988 <WriteRawRC>
  if(Command == PCD_TRANSCEIVE)
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	2b0c      	cmp	r3, #12
 8000bd6:	d103      	bne.n	8000be0 <PcdComMF522+0xa2>
    SetBitMask(BitFramingReg,0x80)              ; // 开始发送
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	200d      	movs	r0, #13
 8000bdc:	f7ff ff06 	bl	80009ec <SetBitMask>
  i = 6000                                      ; //根据时钟频率调整，操作M1卡最大等待时间25ms
 8000be0:	f241 7370 	movw	r3, #6000	; 0x1770
 8000be4:	61bb      	str	r3, [r7, #24]
  do
  {
    n = ReadRawRC(ComIrqReg)                    ;
 8000be6:	2004      	movs	r0, #4
 8000be8:	f7ff fe98 	bl	800091c <ReadRawRC>
 8000bec:	4603      	mov	r3, r0
 8000bee:	773b      	strb	r3, [r7, #28]
    i--                                         ;
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  }
  while((i!=0)&&!(n&0x01)&&!(n&waitFor))        ;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00a      	beq.n	8000c12 <PcdComMF522+0xd4>
 8000bfc:	7f3b      	ldrb	r3, [r7, #28]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <PcdComMF522+0xd4>
 8000c06:	7f3a      	ldrb	r2, [r7, #28]
 8000c08:	7f7b      	ldrb	r3, [r7, #29]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0e9      	beq.n	8000be6 <PcdComMF522+0xa8>
  ClearBitMask(BitFramingReg,0x80)              ;
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	200d      	movs	r0, #13
 8000c16:	f7ff ff09 	bl	8000a2c <ClearBitMask>
  if(i!=0)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d052      	beq.n	8000cc6 <PcdComMF522+0x188>
  {
    if(!(ReadRawRC(ErrorReg)&0x1B))
 8000c20:	2006      	movs	r0, #6
 8000c22:	f7ff fe7b 	bl	800091c <ReadRawRC>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f003 031b 	and.w	r3, r3, #27
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d148      	bne.n	8000cc2 <PcdComMF522+0x184>
    {
      status = MI_OK                            ;
 8000c30:	2300      	movs	r3, #0
 8000c32:	77fb      	strb	r3, [r7, #31]
      if (n&irqEn&0x01)
 8000c34:	7f3a      	ldrb	r2, [r7, #28]
 8000c36:	7fbb      	ldrb	r3, [r7, #30]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <PcdComMF522+0x10a>
        status = MI_NOTAGERR                    ;
 8000c44:	23ff      	movs	r3, #255	; 0xff
 8000c46:	77fb      	strb	r3, [r7, #31]
      if(Command==PCD_TRANSCEIVE)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b0c      	cmp	r3, #12
 8000c4c:	d13b      	bne.n	8000cc6 <PcdComMF522+0x188>
      {
        n = ReadRawRC(FIFOLevelReg)             ;
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f7ff fe64 	bl	800091c <ReadRawRC>
 8000c54:	4603      	mov	r3, r0
 8000c56:	773b      	strb	r3, [r7, #28]
        lastBits = ReadRawRC(ControlReg)&0x07   ;
 8000c58:	200c      	movs	r0, #12
 8000c5a:	f7ff fe5f 	bl	800091c <ReadRawRC>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	75fb      	strb	r3, [r7, #23]
        if(lastBits)
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <PcdComMF522+0x140>
          *pOutLenBit = (n-1)*8 + lastBits      ;
 8000c6c:	7f3b      	ldrb	r3, [r7, #28]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	00da      	lsls	r2, r3, #3
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
 8000c74:	4413      	add	r3, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e004      	b.n	8000c88 <PcdComMF522+0x14a>
        else
          *pOutLenBit = n*8                     ;
 8000c7e:	7f3b      	ldrb	r3, [r7, #28]
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	461a      	mov	r2, r3
 8000c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c86:	601a      	str	r2, [r3, #0]
        if(n==0)
 8000c88:	7f3b      	ldrb	r3, [r7, #28]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <PcdComMF522+0x154>
          n = 1                                 ;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	773b      	strb	r3, [r7, #28]
        if(n>MAXRLEN)
 8000c92:	7f3b      	ldrb	r3, [r7, #28]
 8000c94:	2b12      	cmp	r3, #18
 8000c96:	d901      	bls.n	8000c9c <PcdComMF522+0x15e>
          n = MAXRLEN                           ;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	773b      	strb	r3, [r7, #28]
        for (i=0; i<n; i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	e00a      	b.n	8000cb8 <PcdComMF522+0x17a>
          pOutData[i] = ReadRawRC(FIFODataReg)  ;
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	18d4      	adds	r4, r2, r3
 8000ca8:	2009      	movs	r0, #9
 8000caa:	f7ff fe37 	bl	800091c <ReadRawRC>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	7f3b      	ldrb	r3, [r7, #28]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d3f0      	bcc.n	8000ca2 <PcdComMF522+0x164>
 8000cc0:	e001      	b.n	8000cc6 <PcdComMF522+0x188>
      }
    }
    else
      status = MI_ERR                           ;
 8000cc2:	23fe      	movs	r3, #254	; 0xfe
 8000cc4:	77fb      	strb	r3, [r7, #31]
  }
  SetBitMask(ControlReg,0x80)                   ;// stop timer now
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	200c      	movs	r0, #12
 8000cca:	f7ff fe8f 	bl	80009ec <SetBitMask>
  WriteRawRC(CommandReg,PCD_IDLE)               ;
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fe59 	bl	8000988 <WriteRawRC>
  return status;
 8000cd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3724      	adds	r7, #36	; 0x24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}

08000ce0 <PcdRequest>:
//                0x0800 = Mifare_Pro(X)                            /
//                0x4403 = Mifare_DESFire                           /
//返    回: 成功返回MI_OK                                           /
//******************************************************************/
char PcdRequest(unsigned char req_code,unsigned char *pTagType)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  char status                                        ;
  unsigned int  unLen                                ;
  unsigned char ucComMF522Buf[MAXRLEN]               ;

  ClearBitMask(Status2Reg,0x08)                      ;//清除MRCrypto1on，要用软件清零
 8000cec:	2108      	movs	r1, #8
 8000cee:	2008      	movs	r0, #8
 8000cf0:	f7ff fe9c 	bl	8000a2c <ClearBitMask>
  WriteRawRC(BitFramingReg,0x07)                     ;//startsend=0,rxalign=0,在FIFO中存放的位置，TXlastbit=7
 8000cf4:	2107      	movs	r1, #7
 8000cf6:	200d      	movs	r0, #13
 8000cf8:	f7ff fe46 	bl	8000988 <WriteRawRC>
  SetBitMask(TxControlReg,0x03)                      ;//TX2rfen=1,TX1RFen=1,传递调制的13.56MHZ的载波信号
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	2014      	movs	r0, #20
 8000d00:	f7ff fe74 	bl	80009ec <SetBitMask>

  ucComMF522Buf[0] = req_code                        ;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	733b      	strb	r3, [r7, #12]

  status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen       );
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	f107 010c 	add.w	r1, r7, #12
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	4613      	mov	r3, r2
 8000d18:	2201      	movs	r2, #1
 8000d1a:	200c      	movs	r0, #12
 8000d1c:	f7ff ff0f 	bl	8000b3e <PcdComMF522>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if ((status == MI_OK) && (unLen == 0x10))
 8000d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10a      	bne.n	8000d44 <PcdRequest+0x64>
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	d107      	bne.n	8000d44 <PcdRequest+0x64>
  {
    *pTagType     = ucComMF522Buf[0]                 ;
 8000d34:	7b3a      	ldrb	r2, [r7, #12]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	701a      	strb	r2, [r3, #0]
    *(pTagType+1) = ucComMF522Buf[1]                 ;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	7b7a      	ldrb	r2, [r7, #13]
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e002      	b.n	8000d4a <PcdRequest+0x6a>
  }
  else
    status = MI_ERR                                  ;
 8000d44:	23fe      	movs	r3, #254	; 0xfe
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return status                                      ;
 8000d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <PcdAnticoll>:
//功    能：防冲撞                                                  /
//参数说明: pSnr[OUT]:卡片序列号，4字节                             /
//返    回: 成功返回MI_OK                                           /
//******************************************************************/
char PcdAnticoll(unsigned char *pSnr)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b08c      	sub	sp, #48	; 0x30
 8000d5a:	af02      	add	r7, sp, #8
 8000d5c:	6078      	str	r0, [r7, #4]
    char status;
    unsigned char i,snr_check=0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    unsigned int  unLen;
    unsigned char ucComMF522Buf[MAXRLEN];

    ClearBitMask(Status2Reg,0x08);//清除MRCrypto1on，要用软件清零
 8000d64:	2108      	movs	r1, #8
 8000d66:	2008      	movs	r0, #8
 8000d68:	f7ff fe60 	bl	8000a2c <ClearBitMask>
    WriteRawRC(BitFramingReg,0x00);//表示最后一个字节所有位都发送
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	200d      	movs	r0, #13
 8000d70:	f7ff fe0a 	bl	8000988 <WriteRawRC>
    ClearBitMask(CollReg,0x80);//CollRegCollReg0冲突结束后冲突位被置零
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	200e      	movs	r0, #14
 8000d78:	f7ff fe58 	bl	8000a2c <ClearBitMask>

    ucComMF522Buf[0] = PICC_ANTICOLL1;
 8000d7c:	2393      	movs	r3, #147	; 0x93
 8000d7e:	733b      	strb	r3, [r7, #12]
    ucComMF522Buf[1] = 0x20;
 8000d80:	2320      	movs	r3, #32
 8000d82:	737b      	strb	r3, [r7, #13]

    status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
 8000d84:	f107 020c 	add.w	r2, r7, #12
 8000d88:	f107 010c 	add.w	r1, r7, #12
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4613      	mov	r3, r2
 8000d94:	2202      	movs	r2, #2
 8000d96:	200c      	movs	r0, #12
 8000d98:	f7ff fed1 	bl	8000b3e <PcdComMF522>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (status == MI_OK)
 8000da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d132      	bne.n	8000e10 <PcdAnticoll+0xba>
    {
    	 for (i=0; i<4; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000db0:	e01c      	b.n	8000dec <PcdAnticoll+0x96>
         {
             *(pSnr+i)  = ucComMF522Buf[i];
 8000db2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	440b      	add	r3, r1
 8000dbe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dc2:	440a      	add	r2, r1
 8000dc4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8000dc8:	701a      	strb	r2, [r3, #0]
             snr_check ^= ucComMF522Buf[i];
 8000dca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dd2:	4413      	add	r3, r2
 8000dd4:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000dd8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ddc:	4053      	eors	r3, r2
 8000dde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    	 for (i=0; i<4; i++)
 8000de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000de6:	3301      	adds	r3, #1
 8000de8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d9de      	bls.n	8000db2 <PcdAnticoll+0x5c>
         }
         if (snr_check != ucComMF522Buf[i])
 8000df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000df8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e02:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d002      	beq.n	8000e10 <PcdAnticoll+0xba>
         {   status = MI_ERR;    }
 8000e0a:	23fe      	movs	r3, #254	; 0xfe
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    SetBitMask(CollReg,0x80);//CollRegCollReg 在106kbps良好的防冲突情况下该位置1
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	200e      	movs	r0, #14
 8000e14:	f7ff fdea 	bl	80009ec <SetBitMask>
    return status;
 8000e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <ReaderCard>:
//==============================================================================
//读取卡的类型
//读取卡的ID号
//==============================================================================
void ReaderCard(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af02      	add	r7, sp, #8
	char temp_value;

	if(PcdRequest(PICC_REQALL,Temp)==MI_OK)	//选卡
 8000e2a:	4941      	ldr	r1, [pc, #260]	; (8000f30 <ReaderCard+0x10c>)
 8000e2c:	2052      	movs	r0, #82	; 0x52
 8000e2e:	f7ff ff57 	bl	8000ce0 <PcdRequest>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d176      	bne.n	8000f26 <ReaderCard+0x102>
	{
		if(Temp[0]==0x04&&Temp[1]==0x00)
 8000e38:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <ReaderCard+0x10c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d107      	bne.n	8000e50 <ReaderCard+0x2c>
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <ReaderCard+0x10c>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d103      	bne.n	8000e50 <ReaderCard+0x2c>
				printf("\r\nMFOne-S50\r\n");
 8000e48:	483a      	ldr	r0, [pc, #232]	; (8000f34 <ReaderCard+0x110>)
 8000e4a:	f003 fe97 	bl	8004b7c <puts>
 8000e4e:	e032      	b.n	8000eb6 <ReaderCard+0x92>
		else if(Temp[0]==0x02&&Temp[1]==0x00)
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <ReaderCard+0x10c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d107      	bne.n	8000e68 <ReaderCard+0x44>
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <ReaderCard+0x10c>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d103      	bne.n	8000e68 <ReaderCard+0x44>
			printf("MFOne-S70");
 8000e60:	4835      	ldr	r0, [pc, #212]	; (8000f38 <ReaderCard+0x114>)
 8000e62:	f003 fe05 	bl	8004a70 <iprintf>
 8000e66:	e026      	b.n	8000eb6 <ReaderCard+0x92>
		else if(Temp[0]==0x44&&Temp[1]==0x00)
 8000e68:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <ReaderCard+0x10c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b44      	cmp	r3, #68	; 0x44
 8000e6e:	d107      	bne.n	8000e80 <ReaderCard+0x5c>
 8000e70:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <ReaderCard+0x10c>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d103      	bne.n	8000e80 <ReaderCard+0x5c>
			printf("MF-UltraLight");
 8000e78:	4830      	ldr	r0, [pc, #192]	; (8000f3c <ReaderCard+0x118>)
 8000e7a:	f003 fdf9 	bl	8004a70 <iprintf>
 8000e7e:	e01a      	b.n	8000eb6 <ReaderCard+0x92>
		else if(Temp[0]==0x08&&Temp[1]==0x00)
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <ReaderCard+0x10c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d107      	bne.n	8000e98 <ReaderCard+0x74>
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <ReaderCard+0x10c>)
 8000e8a:	785b      	ldrb	r3, [r3, #1]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <ReaderCard+0x74>
			printf("MF-Pro");
 8000e90:	482b      	ldr	r0, [pc, #172]	; (8000f40 <ReaderCard+0x11c>)
 8000e92:	f003 fded 	bl	8004a70 <iprintf>
 8000e96:	e00e      	b.n	8000eb6 <ReaderCard+0x92>
		else if(Temp[0]==0x44&&Temp[1]==0x03)
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <ReaderCard+0x10c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b44      	cmp	r3, #68	; 0x44
 8000e9e:	d107      	bne.n	8000eb0 <ReaderCard+0x8c>
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <ReaderCard+0x10c>)
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d103      	bne.n	8000eb0 <ReaderCard+0x8c>
			printf("MF Desire");
 8000ea8:	4826      	ldr	r0, [pc, #152]	; (8000f44 <ReaderCard+0x120>)
 8000eaa:	f003 fde1 	bl	8004a70 <iprintf>
 8000eae:	e002      	b.n	8000eb6 <ReaderCard+0x92>
		else
			printf("Unknown");
 8000eb0:	4825      	ldr	r0, [pc, #148]	; (8000f48 <ReaderCard+0x124>)
 8000eb2:	f003 fddd 	bl	8004a70 <iprintf>
		if(PcdAnticoll(UID)==MI_OK)			//防冲撞
 8000eb6:	4825      	ldr	r0, [pc, #148]	; (8000f4c <ReaderCard+0x128>)
 8000eb8:	f7ff ff4d 	bl	8000d56 <PcdAnticoll>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d131      	bne.n	8000f26 <ReaderCard+0x102>
		{
			printf("Card Id is:");
 8000ec2:	4823      	ldr	r0, [pc, #140]	; (8000f50 <ReaderCard+0x12c>)
 8000ec4:	f003 fdd4 	bl	8004a70 <iprintf>
			/* 获取卡值  */
			printf("%d%d%d%d\r\n",UID[0],UID[1],UID[2],UID[3]);
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <ReaderCard+0x128>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <ReaderCard+0x128>)
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <ReaderCard+0x128>)
 8000ed6:	789b      	ldrb	r3, [r3, #2]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <ReaderCard+0x128>)
 8000edc:	78db      	ldrb	r3, [r3, #3]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <ReaderCard+0x130>)
 8000ee4:	f003 fdc4 	bl	8004a70 <iprintf>
			temp_value = ((UID[0]>>4)*10+(UID[0]&0x0f));
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <ReaderCard+0x128>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <ReaderCard+0x128>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	71fb      	strb	r3, [r7, #7]
			switch(temp_value)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f0c:	d105      	bne.n	8000f1a <ReaderCard+0xf6>
			{
				case 63 : printf("管理员:%d 验证通过!\r\n",temp_value);    break;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <ReaderCard+0x134>)
 8000f14:	f003 fdac 	bl	8004a70 <iprintf>
 8000f18:	e006      	b.n	8000f28 <ReaderCard+0x104>
				default : printf("无效卡:%d 验证失败!\r\n",temp_value);    break;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480f      	ldr	r0, [pc, #60]	; (8000f5c <ReaderCard+0x138>)
 8000f20:	f003 fda6 	bl	8004a70 <iprintf>
 8000f24:	e000      	b.n	8000f28 <ReaderCard+0x104>
			}
		}
 8000f26:	bf00      	nop
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000184 	.word	0x20000184
 8000f34:	08005c28 	.word	0x08005c28
 8000f38:	08005c38 	.word	0x08005c38
 8000f3c:	08005c44 	.word	0x08005c44
 8000f40:	08005c54 	.word	0x08005c54
 8000f44:	08005c5c 	.word	0x08005c5c
 8000f48:	08005c68 	.word	0x08005c68
 8000f4c:	2000019c 	.word	0x2000019c
 8000f50:	08005c70 	.word	0x08005c70
 8000f54:	08005c7c 	.word	0x08005c7c
 8000f58:	08005c88 	.word	0x08005c88
 8000f5c:	08005ca8 	.word	0x08005ca8

08000f60 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <RetargetInit+0x28>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <RetargetInit+0x2c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6898      	ldr	r0, [r3, #8]
 8000f74:	2300      	movs	r3, #0
 8000f76:	2202      	movs	r2, #2
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f003 fe07 	bl	8004b8c <setvbuf>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001a4 	.word	0x200001a4
 8000f8c:	2000000c 	.word	0x2000000c

08000f90 <_isatty>:

int _isatty(int fd) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db04      	blt.n	8000fa8 <_isatty+0x18>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	dc01      	bgt.n	8000fa8 <_isatty+0x18>
    return 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e005      	b.n	8000fb4 <_isatty+0x24>

  errno = EBADF;
 8000fa8:	f003 fd30 	bl	8004a0c <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2209      	movs	r2, #9
 8000fb0:	601a      	str	r2, [r3, #0]
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_write>:

int _write(int fd, char* ptr, int len) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d002      	beq.n	8000fd4 <_write+0x18>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d111      	bne.n	8000ff8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <_write+0x54>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	f002 fc45 	bl	8003870 <HAL_UART_Transmit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <_write+0x38>
      return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	e008      	b.n	8001006 <_write+0x4a>
    else
      return EIO;
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e006      	b.n	8001006 <_write+0x4a>
  }
  errno = EBADF;
 8000ff8:	f003 fd08 	bl	8004a0c <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2209      	movs	r2, #9
 8001000:	601a      	str	r2, [r3, #0]
  return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001a4 	.word	0x200001a4

08001014 <_close>:

int _close(int fd) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db04      	blt.n	800102c <_close+0x18>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	dc01      	bgt.n	800102c <_close+0x18>
    return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e006      	b.n	800103a <_close+0x26>

  errno = EBADF;
 800102c:	f003 fcee 	bl	8004a0c <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	2209      	movs	r2, #9
 8001034:	601a      	str	r2, [r3, #0]
  return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800104e:	f003 fcdd 	bl	8004a0c <__errno>
 8001052:	4603      	mov	r3, r0
 8001054:	2209      	movs	r2, #9
 8001056:	601a      	str	r2, [r3, #0]
  return -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_read>:

int _read(int fd, char* ptr, int len) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d110      	bne.n	8001098 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <_read+0x4c>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	2201      	movs	r2, #1
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	f002 fc89 	bl	8003998 <HAL_UART_Receive>
 8001086:	4603      	mov	r3, r0
 8001088:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <_read+0x30>
      return 1;
 8001090:	2301      	movs	r3, #1
 8001092:	e008      	b.n	80010a6 <_read+0x42>
    else
      return EIO;
 8001094:	2305      	movs	r3, #5
 8001096:	e006      	b.n	80010a6 <_read+0x42>
  }
  errno = EBADF;
 8001098:	f003 fcb8 	bl	8004a0c <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	2209      	movs	r2, #9
 80010a0:	601a      	str	r2, [r3, #0]
  return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001a4 	.word	0x200001a4

080010b4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db08      	blt.n	80010d6 <_fstat+0x22>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	dc05      	bgt.n	80010d6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d0:	605a      	str	r2, [r3, #4]
    return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e005      	b.n	80010e2 <_fstat+0x2e>
  }

  errno = EBADF;
 80010d6:	f003 fc99 	bl	8004a0c <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	2209      	movs	r2, #9
 80010de:	601a      	str	r2, [r3, #0]
  return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x44>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_SPI_MspInit+0x8c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12f      	bne.n	80011b6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_SPI_MspInit+0x90>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_SPI_MspInit+0x90>)
 800115c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001160:	6613      	str	r3, [r2, #96]	; 0x60
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_SPI_MspInit+0x90>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_SPI_MspInit+0x90>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_SPI_MspInit+0x90>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_SPI_MspInit+0x90>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001186:	2338      	movs	r3, #56	; 0x38
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001196:	2305      	movs	r3, #5
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <HAL_SPI_MspInit+0x94>)
 80011a2:	f000 fb6f 	bl	8001884 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2023      	movs	r0, #35	; 0x23
 80011ac:	f000 fab5 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011b0:	2023      	movs	r0, #35	; 0x23
 80011b2:	f000 face 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40013000 	.word	0x40013000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09e      	sub	sp, #120	; 0x78
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2254      	movs	r2, #84	; 0x54
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fc37 	bl	8004a60 <memset>
  if(huart->Instance==USART2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_UART_MspInit+0xb8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d13e      	bne.n	800127a <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fb57 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001214:	f7ff fb0e 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_UART_MspInit+0xbc>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <HAL_UART_MspInit+0xbc>)
 800121e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001222:	6593      	str	r3, [r2, #88]	; 0x58
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_UART_MspInit+0xbc>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0xbc>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_UART_MspInit+0xbc>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_UART_MspInit+0xbc>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001248:	230c      	movs	r3, #12
 800124a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001258:	2307      	movs	r3, #7
 800125a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f000 fb0d 	bl	8001884 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2026      	movs	r0, #38	; 0x26
 8001270:	f000 fa53 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001274:	2026      	movs	r0, #38	; 0x26
 8001276:	f000 fa6c 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3778      	adds	r7, #120	; 0x78
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004400 	.word	0x40004400
 8001288:	40021000 	.word	0x40021000

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d8:	f000 f900 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <SPI1_IRQHandler+0x10>)
 80012e6:	f001 fff1 	bl	80032cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000009c 	.word	0x2000009c

080012f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	char ch;
	uint32_t isrflags   = READ_REG(huart2.Instance->ISR);
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <USART2_IRQHandler+0x58>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	60fb      	str	r3, [r7, #12]
	uint32_t cr1its     = READ_REG(huart2.Instance->CR1);
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <USART2_IRQHandler+0x58>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60bb      	str	r3, [r7, #8]
	if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)){
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d014      	beq.n	800133e <USART2_IRQHandler+0x4a>
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00f      	beq.n	800133e <USART2_IRQHandler+0x4a>
		huart2.Instance->ISR;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <USART2_IRQHandler+0x58>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	69db      	ldr	r3, [r3, #28]
		ch = huart2.Instance->RDR;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <USART2_IRQHandler+0x58>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132a:	b29b      	uxth	r3, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart2, &ch, 1, 1000);
 8001330:	1df9      	adds	r1, r7, #7
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	2201      	movs	r2, #1
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <USART2_IRQHandler+0x58>)
 800133a:	f002 fa99 	bl	8003870 <HAL_UART_Transmit>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <USART2_IRQHandler+0x58>)
 8001340:	f002 fbfc 	bl	8003b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000100 	.word	0x20000100

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f003 fb44 	bl	8004a0c <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20010000 	.word	0x20010000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	20000090 	.word	0x20000090
 80013b8:	200001c0 	.word	0x200001c0

080013bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff ffea 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	; (800142c <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 fb03 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff f8a9 	bl	8000568 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001424:	08005db8 	.word	0x08005db8
  ldr r2, =_sbss
 8001428:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800142c:	200001bc 	.word	0x200001bc

08001430 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_IRQHandler>

08001432 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f961 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f80e 	bl	8001464 <HAL_InitTick>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	e001      	b.n	8001458 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001454:	f7ff fe4a 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001458:	79fb      	ldrb	r3, [r7, #7]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_InitTick+0x6c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d023      	beq.n	80014c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_InitTick+0x70>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_InitTick+0x6c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f96d 	bl	800176e <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d809      	bhi.n	80014b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f937 	bl	800171a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_InitTick+0x74>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e007      	b.n	80014c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e004      	b.n	80014c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e001      	b.n	80014c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	200001a8 	.word	0x200001a8

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200001a8 	.word	0x200001a8

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff29 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff3e 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff8e 	bl	8001658 <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff31 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa2 	bl	80016c0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d008      	beq.n	80017b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2204      	movs	r2, #4
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e022      	b.n	80017f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020e 	bic.w	r2, r2, #14
 80017be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f003 021c 	and.w	r2, r3, #28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d005      	beq.n	8001826 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2204      	movs	r2, #4
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e029      	b.n	800187a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020e 	bic.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f003 021c 	and.w	r2, r3, #28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
    }
  }
  return status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e148      	b.n	8001b26 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 813a 	beq.w	8001b20 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d005      	beq.n	80018c4 <HAL_GPIO_Init+0x40>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b03      	cmp	r3, #3
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d123      	bne.n	80019b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8094 	beq.w	8001b20 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f8:	4b52      	ldr	r3, [pc, #328]	; (8001b44 <HAL_GPIO_Init+0x2c0>)
 80019fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fc:	4a51      	ldr	r2, [pc, #324]	; (8001b44 <HAL_GPIO_Init+0x2c0>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6613      	str	r3, [r2, #96]	; 0x60
 8001a04:	4b4f      	ldr	r3, [pc, #316]	; (8001b44 <HAL_GPIO_Init+0x2c0>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a10:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <HAL_GPIO_Init+0x2c4>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a3a:	d00d      	beq.n	8001a58 <HAL_GPIO_Init+0x1d4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a43      	ldr	r2, [pc, #268]	; (8001b4c <HAL_GPIO_Init+0x2c8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0x1d0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a42      	ldr	r2, [pc, #264]	; (8001b50 <HAL_GPIO_Init+0x2cc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_GPIO_Init+0x1cc>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e004      	b.n	8001a5a <HAL_GPIO_Init+0x1d6>
 8001a50:	2307      	movs	r3, #7
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x1d6>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_GPIO_Init+0x1d6>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	f002 0203 	and.w	r2, r2, #3
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	4093      	lsls	r3, r2
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a6a:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_GPIO_Init+0x2c4>)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a9c:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af0:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f aeaf 	bne.w	8001894 <HAL_GPIO_Init+0x10>
  }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	48000800 	.word	0x48000800
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b74:	e002      	b.n	8001b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd2:	d130      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be0:	d038      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2232      	movs	r2, #50	; 0x32
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	3301      	adds	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c08:	e002      	b.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1c:	d102      	bne.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f2      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d110      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e00f      	b.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d007      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40007000 	.word	0x40007000
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 bc11 	b.w	80024a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c84:	4ba0      	ldr	r3, [pc, #640]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8e:	4b9e      	ldr	r3, [pc, #632]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80e4 	beq.w	8001e6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4c>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	f040 808b 	bne.w	8001dca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	f040 8087 	bne.w	8001dca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cbc:	4b92      	ldr	r3, [pc, #584]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x64>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e3e8      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_RCC_OscConfig+0x7e>
 8001ce4:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cec:	e005      	b.n	8001cfa <HAL_RCC_OscConfig+0x8a>
 8001cee:	4b86      	ldr	r3, [pc, #536]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d223      	bcs.n	8001d46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fd7a 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e3c9      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d12:	4b7d      	ldr	r3, [pc, #500]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7c      	ldr	r2, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4977      	ldr	r1, [pc, #476]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d30:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	4972      	ldr	r1, [pc, #456]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
 8001d44:	e025      	b.n	8001d92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d46:	4b70      	ldr	r3, [pc, #448]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6f      	ldr	r2, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b6d      	ldr	r3, [pc, #436]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	496a      	ldr	r1, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	4965      	ldr	r1, [pc, #404]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fd3a 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e389      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d92:	f000 fc6f 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	495a      	ldr	r1, [pc, #360]	; (8001f0c <HAL_RCC_OscConfig+0x29c>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <HAL_RCC_OscConfig+0x2a0>)
 8001db0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fb54 	bl	8001464 <HAL_InitTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d052      	beq.n	8001e6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	e36d      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d032      	beq.n	8001e38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dd2:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dde:	f7ff fb91 	bl	8001504 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de6:	f7ff fb8d 	bl	8001504 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e356      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e04:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a3f      	ldr	r2, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	493a      	ldr	r1, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4935      	ldr	r1, [pc, #212]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
 8001e36:	e01a      	b.n	8001e6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fb5e 	bl	8001504 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fb5a 	bl	8001504 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e323      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1dc>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d073      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_OscConfig+0x21c>
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d10e      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d063      	beq.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d15f      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e300      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d106      	bne.n	8001ebc <HAL_RCC_OscConfig+0x24c>
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x288>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x270>
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x288>
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb00 	bl	8001504 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	e010      	b.n	8001f2a <HAL_RCC_OscConfig+0x2ba>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08005cc8 	.word	0x08005cc8
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff faf4 	bl	8001504 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e2bd      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2a:	4baf      	ldr	r3, [pc, #700]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2a8>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fae4 	bl	8001504 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fae0 	bl	8001504 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e2a9      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f52:	4ba5      	ldr	r3, [pc, #660]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2d0>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d060      	beq.n	8002030 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_OscConfig+0x310>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d119      	bne.n	8001fae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d116      	bne.n	8001fae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	4b99      	ldr	r3, [pc, #612]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x328>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e286      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b93      	ldr	r3, [pc, #588]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	4990      	ldr	r1, [pc, #576]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fac:	e040      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d023      	beq.n	8001ffe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb6:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8b      	ldr	r2, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fa9f 	bl	8001504 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fa9b 	bl	8001504 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e264      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fdc:	4b82      	ldr	r3, [pc, #520]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	497c      	ldr	r1, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a79      	ldr	r2, [pc, #484]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7ff fa7b 	bl	8001504 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fa77 	bl	8001504 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e240      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002024:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01c      	beq.n	800207e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	4a67      	ldr	r2, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff fa56 	bl	8001504 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7ff fa52 	bl	8001504 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e21b      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206e:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCC_OscConfig+0x3ec>
 800207c:	e01b      	b.n	80020b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002084:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fa39 	bl	8001504 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff fa35 	bl	8001504 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1fe      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a8:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ef      	bne.n	8002096 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80a6 	beq.w	8002210 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d118      	bne.n	800212e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3a      	ldr	r2, [pc, #232]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002108:	f7ff f9fc 	bl	8001504 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7ff f9f8 	bl	8001504 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1c1      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x4d8>
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002146:	e024      	b.n	8002192 <HAL_RCC_OscConfig+0x522>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d110      	bne.n	8002172 <HAL_RCC_OscConfig+0x502>
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002170:	e00f      	b.n	8002192 <HAL_RCC_OscConfig+0x522>
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800218a:	f023 0304 	bic.w	r3, r3, #4
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d016      	beq.n	80021c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7ff f9b3 	bl	8001504 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff f9af 	bl	8001504 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e176      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ed      	beq.n	80021a2 <HAL_RCC_OscConfig+0x532>
 80021c6:	e01a      	b.n	80021fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7ff f99c 	bl	8001504 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ce:	e00f      	b.n	80021f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7ff f998 	bl	8001504 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d906      	bls.n	80021f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e15f      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f0:	4baa      	ldr	r3, [pc, #680]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e8      	bne.n	80021d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4ba5      	ldr	r3, [pc, #660]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4aa4      	ldr	r2, [pc, #656]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d03c      	beq.n	8002296 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01c      	beq.n	800225e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002224:	4b9d      	ldr	r3, [pc, #628]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800222a:	4a9c      	ldr	r2, [pc, #624]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7ff f966 	bl	8001504 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800223c:	f7ff f962 	bl	8001504 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e12b      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800224e:	4b93      	ldr	r3, [pc, #588]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ef      	beq.n	800223c <HAL_RCC_OscConfig+0x5cc>
 800225c:	e01b      	b.n	8002296 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800225e:	4b8f      	ldr	r3, [pc, #572]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002264:	4a8d      	ldr	r2, [pc, #564]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226e:	f7ff f949 	bl	8001504 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002276:	f7ff f945 	bl	8001504 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e10e      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002288:	4b84      	ldr	r3, [pc, #528]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 800228a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ef      	bne.n	8002276 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8102 	beq.w	80024a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	f040 80c5 	bne.w	8002434 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022aa:	4b7c      	ldr	r3, [pc, #496]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0203 	and.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d12c      	bne.n	8002318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	3b01      	subs	r3, #1
 80022ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d123      	bne.n	8002318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d11b      	bne.n	8002318 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d113      	bne.n	8002318 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	085b      	lsrs	r3, r3, #1
 80022fc:	3b01      	subs	r3, #1
 80022fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d109      	bne.n	8002318 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	3b01      	subs	r3, #1
 8002312:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d067      	beq.n	80023e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d062      	beq.n	80023e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800231e:	4b5f      	ldr	r3, [pc, #380]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0bb      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5a      	ldr	r2, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002338:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800233a:	f7ff f8e3 	bl	8001504 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff f8df 	bl	8001504 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0a8      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	4b51      	ldr	r3, [pc, #324]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002360:	4b4e      	ldr	r3, [pc, #312]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	4b4e      	ldr	r3, [pc, #312]	; (80024a0 <HAL_RCC_OscConfig+0x830>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002370:	3a01      	subs	r2, #1
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800237a:	0212      	lsls	r2, r2, #8
 800237c:	4311      	orrs	r1, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002382:	0852      	lsrs	r2, r2, #1
 8002384:	3a01      	subs	r2, #1
 8002386:	0552      	lsls	r2, r2, #21
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800238e:	0852      	lsrs	r2, r2, #1
 8002390:	3a01      	subs	r2, #1
 8002392:	0652      	lsls	r2, r2, #25
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800239a:	06d2      	lsls	r2, r2, #27
 800239c:	430a      	orrs	r2, r1
 800239e:	493f      	ldr	r1, [pc, #252]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023a4:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a3c      	ldr	r2, [pc, #240]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b0:	4b3a      	ldr	r3, [pc, #232]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a39      	ldr	r2, [pc, #228]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023bc:	f7ff f8a2 	bl	8001504 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff f89e 	bl	8001504 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e067      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e2:	e05f      	b.n	80024a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e05e      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d157      	bne.n	80024a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023f4:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800240c:	f7ff f87a 	bl	8001504 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7ff f876 	bl	8001504 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e03f      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x7a4>
 8002432:	e037      	b.n	80024a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d02d      	beq.n	8002496 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002444:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4a11      	ldr	r2, [pc, #68]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002458:	f023 0303 	bic.w	r3, r3, #3
 800245c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a0e      	ldr	r2, [pc, #56]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 8002464:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7ff f849 	bl	8001504 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff f845 	bl	8001504 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e00e      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_RCC_OscConfig+0x82c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x806>
 8002494:	e006      	b.n	80024a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e005      	b.n	80024a6 <HAL_RCC_OscConfig+0x836>
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0c8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b66      	ldr	r3, [pc, #408]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d910      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4961      	ldr	r1, [pc, #388]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b0      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d04c      	beq.n	800259a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002508:	4b56      	ldr	r3, [pc, #344]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d121      	bne.n	8002558 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e09e      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d107      	bne.n	8002530 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d115      	bne.n	8002558 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e092      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002538:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e086      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002548:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e07e      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 0203 	bic.w	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	493f      	ldr	r1, [pc, #252]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256a:	f7fe ffcb 	bl	8001504 <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002570:	e00a      	b.n	8002588 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002572:	f7fe ffc7 	bl	8001504 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e066      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 020c 	and.w	r2, r3, #12
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	429a      	cmp	r2, r3
 8002598:	d1eb      	bne.n	8002572 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a6:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	492c      	ldr	r1, [pc, #176]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d210      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4924      	ldr	r1, [pc, #144]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x1b0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e036      	b.n	8002656 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4918      	ldr	r1, [pc, #96]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4910      	ldr	r1, [pc, #64]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002626:	f000 f825 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262a:	4602      	mov	r2, r0
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCC_ClockConfig+0x1b4>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	490c      	ldr	r1, [pc, #48]	; (8002668 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe ff0a 	bl	8001464 <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
 8002652:	72fb      	strb	r3, [r7, #11]

  return status;
 8002654:	7afb      	ldrb	r3, [r7, #11]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	08005cc8 	.word	0x08005cc8
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11e      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e004      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 80026fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d134      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0xa6>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d003      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xac>
 8002718:	e005      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 800271c:	617b      	str	r3, [r7, #20]
      break;
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	617b      	str	r3, [r7, #20]
      break;
 800272a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	fb02 f203 	mul.w	r2, r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0e5b      	lsrs	r3, r3, #25
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	3301      	adds	r3, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800276c:	69bb      	ldr	r3, [r7, #24]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08005ce0 	.word	0x08005ce0
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08005cd8 	.word	0x08005cd8

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d4:	f7ff ffda 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0adb      	lsrs	r3, r3, #11
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08005cd8 	.word	0x08005cd8

080027fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002814:	f7ff f9c8 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 8002818:	6178      	str	r0, [r7, #20]
 800281a:	e014      	b.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002826:	6593      	str	r3, [r2, #88]	; 0x58
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002834:	f7ff f9b8 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 8002838:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d10b      	bne.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d919      	bls.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2ba0      	cmp	r3, #160	; 0xa0
 8002858:	d902      	bls.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285a:	2302      	movs	r3, #2
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e013      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e010      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d902      	bls.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800286c:	2303      	movs	r3, #3
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e00a      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b80      	cmp	r3, #128	; 0x80
 8002876:	d102      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002878:	2302      	movs	r3, #2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e004      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b70      	cmp	r3, #112	; 0x70
 8002882:	d101      	bne.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	4909      	ldr	r1, [pc, #36]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40022000 	.word	0x40022000

080028bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c8:	2300      	movs	r3, #0
 80028ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d031      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028e0:	d01a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028e6:	d814      	bhi.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f0:	d10f      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028f2:	4bac      	ldr	r3, [pc, #688]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4aab      	ldr	r2, [pc, #684]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028fe:	e00c      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f9dc 	bl	8002cc4 <RCCEx_PLLSAI1_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002910:	e003      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	74fb      	strb	r3, [r7, #19]
      break;
 8002916:	e000      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002920:	4ba0      	ldr	r3, [pc, #640]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	499d      	ldr	r1, [pc, #628]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002936:	e001      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8099 	beq.w	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800294e:	4b95      	ldr	r3, [pc, #596]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800295e:	2300      	movs	r3, #0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b8f      	ldr	r3, [pc, #572]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	4a8e      	ldr	r2, [pc, #568]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	6593      	str	r3, [r2, #88]	; 0x58
 8002970:	4b8c      	ldr	r3, [pc, #560]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a88      	ldr	r2, [pc, #544]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800298c:	f7fe fdba 	bl	8001504 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002992:	e009      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fdb6 	bl	8001504 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	74fb      	strb	r3, [r7, #19]
        break;
 80029a6:	e005      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029a8:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ef      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d155      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ba:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01e      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d019      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029d6:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029e2:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029f2:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a02:	4a68      	ldr	r2, [pc, #416]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d016      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fd76 	bl	8001504 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fd72 	bl	8001504 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d902      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	74fb      	strb	r3, [r7, #19]
            break;
 8002a32:	e006      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a34:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ec      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a48:	4b56      	ldr	r3, [pc, #344]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	4953      	ldr	r1, [pc, #332]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a5e:	e004      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
 8002a64:	e001      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6a:	7c7b      	ldrb	r3, [r7, #17]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4a4b      	ldr	r2, [pc, #300]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a88:	4b46      	ldr	r3, [pc, #280]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4943      	ldr	r1, [pc, #268]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f023 020c 	bic.w	r2, r3, #12
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	493a      	ldr	r1, [pc, #232]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	4932      	ldr	r1, [pc, #200]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	4918      	ldr	r1, [pc, #96]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4910      	ldr	r1, [pc, #64]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d02c      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b94:	d10a      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b96:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba0:	60d3      	str	r3, [r2, #12]
 8002ba2:	e015      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f881 	bl	8002cc4 <RCCEx_PLLSAI1_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d028      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bdc:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	492d      	ldr	r1, [pc, #180]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
 8002c08:	e011      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f852 	bl	8002cc4 <RCCEx_PLLSAI1_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01c      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c48:	4915      	ldr	r1, [pc, #84]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f82f 	bl	8002cc4 <RCCEx_PLLSAI1_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cd2:	4b74      	ldr	r3, [pc, #464]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cde:	4b71      	ldr	r3, [pc, #452]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0203 	and.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d10d      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cf6:	4b6b      	ldr	r3, [pc, #428]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
       ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d047      	beq.n	8002d9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e044      	b.n	8002d9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d018      	beq.n	8002d4a <RCCEx_PLLSAI1_Config+0x86>
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d825      	bhi.n	8002d68 <RCCEx_PLLSAI1_Config+0xa4>
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d002      	beq.n	8002d26 <RCCEx_PLLSAI1_Config+0x62>
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d009      	beq.n	8002d38 <RCCEx_PLLSAI1_Config+0x74>
 8002d24:	e020      	b.n	8002d68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11d      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d36:	e01a      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d38:	4b5a      	ldr	r3, [pc, #360]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d116      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d48:	e013      	b.n	8002d72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d4a:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d56:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d66:	e006      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6c:	e004      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	430b      	orrs	r3, r1
 8002d94:	4943      	ldr	r1, [pc, #268]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d17c      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da0:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3f      	ldr	r2, [pc, #252]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dac:	f7fe fbaa 	bl	8001504 <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db2:	e009      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db4:	f7fe fba6 	bl	8001504 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	73fb      	strb	r3, [r7, #15]
        break;
 8002dc6:	e005      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dc8:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ef      	bne.n	8002db4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d15f      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d110      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de0:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002de8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	0211      	lsls	r1, r2, #8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68d2      	ldr	r2, [r2, #12]
 8002df6:	06d2      	lsls	r2, r2, #27
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	492a      	ldr	r1, [pc, #168]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	610b      	str	r3, [r1, #16]
 8002e00:	e027      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d112      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e08:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6892      	ldr	r2, [r2, #8]
 8002e18:	0211      	lsls	r1, r2, #8
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6912      	ldr	r2, [r2, #16]
 8002e1e:	0852      	lsrs	r2, r2, #1
 8002e20:	3a01      	subs	r2, #1
 8002e22:	0552      	lsls	r2, r2, #21
 8002e24:	430a      	orrs	r2, r1
 8002e26:	491f      	ldr	r1, [pc, #124]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	610b      	str	r3, [r1, #16]
 8002e2c:	e011      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	0211      	lsls	r1, r2, #8
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6952      	ldr	r2, [r2, #20]
 8002e44:	0852      	lsrs	r2, r2, #1
 8002e46:	3a01      	subs	r2, #1
 8002e48:	0652      	lsls	r2, r2, #25
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	4915      	ldr	r1, [pc, #84]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fb51 	bl	8001504 <HAL_GetTick>
 8002e62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e64:	e009      	b.n	8002e7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e66:	f7fe fb4d 	bl	8001504 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d902      	bls.n	8002e7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	73fb      	strb	r3, [r7, #15]
          break;
 8002e78:	e005      	b.n	8002e86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ef      	beq.n	8002e66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4903      	ldr	r1, [pc, #12]	; (8002ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e095      	b.n	8002fe6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eca:	d009      	beq.n	8002ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
 8002ed2:	e005      	b.n	8002ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe f91a 	bl	8001134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f20:	d902      	bls.n	8002f28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e002      	b.n	8002f2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f36:	d007      	beq.n	8002f48 <HAL_SPI_Init+0xa0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f40:	d002      	beq.n	8002f48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	ea42 0103 	orr.w	r1, r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	f003 0204 	and.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b088      	sub	sp, #32
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_SPI_Transmit+0x22>
 800300c:	2302      	movs	r3, #2
 800300e:	e158      	b.n	80032c2 <HAL_SPI_Transmit+0x2d4>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003018:	f7fe fa74 	bl	8001504 <HAL_GetTick>
 800301c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d002      	beq.n	8003034 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003032:	e13d      	b.n	80032b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_Transmit+0x52>
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003044:	e134      	b.n	80032b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2203      	movs	r2, #3
 800304a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	d10f      	bne.n	80030b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d007      	beq.n	80030d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d8:	d94b      	bls.n	8003172 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_SPI_Transmit+0xfa>
 80030e2:	8afb      	ldrh	r3, [r7, #22]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d13e      	bne.n	8003166 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	881a      	ldrh	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	1c9a      	adds	r2, r3, #2
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800310c:	e02b      	b.n	8003166 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d112      	bne.n	8003142 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003140:	e011      	b.n	8003166 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003142:	f7fe f9df 	bl	8001504 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d803      	bhi.n	800315a <HAL_SPI_Transmit+0x16c>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d102      	bne.n	8003160 <HAL_SPI_Transmit+0x172>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003164:	e0a4      	b.n	80032b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ce      	bne.n	800310e <HAL_SPI_Transmit+0x120>
 8003170:	e07c      	b.n	800326c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_SPI_Transmit+0x192>
 800317a:	8afb      	ldrh	r3, [r7, #22]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d170      	bne.n	8003262 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d912      	bls.n	80031b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	1c9a      	adds	r2, r3, #2
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b02      	subs	r3, #2
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ae:	e058      	b.n	8003262 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031d6:	e044      	b.n	8003262 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d12b      	bne.n	800323e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d912      	bls.n	8003216 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b02      	subs	r3, #2
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003214:	e025      	b.n	8003262 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800323c:	e011      	b.n	8003262 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323e:	f7fe f961 	bl	8001504 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d803      	bhi.n	8003256 <HAL_SPI_Transmit+0x268>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d102      	bne.n	800325c <HAL_SPI_Transmit+0x26e>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003260:	e026      	b.n	80032b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1b5      	bne.n	80031d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	6839      	ldr	r1, [r7, #0]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa69 	bl	8003748 <SPI_EndRxTxTransaction>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e000      	b.n	80032b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80032ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10f      	bne.n	8003310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
    return;
 800330e:	e0d7      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_SPI_IRQHandler+0x66>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	09db      	lsrs	r3, r3, #7
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
    return;
 8003330:	e0c6      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_SPI_IRQHandler+0x8c>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80b4 	beq.w	80034c0 <HAL_SPI_IRQHandler+0x1f4>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80ad 	beq.w	80034c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d023      	beq.n	80033ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b03      	cmp	r3, #3
 800337c:	d011      	beq.n	80033a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	f043 0204 	orr.w	r2, r3, #4
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	e00b      	b.n	80033ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	693b      	ldr	r3, [r7, #16]
        return;
 80033b8:	e082      	b.n	80034c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d014      	beq.n	80033f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	f043 0208 	orr.w	r2, r3, #8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04f      	beq.n	80034be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800342c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <HAL_SPI_IRQHandler+0x17e>
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d034      	beq.n	80034b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0203 	bic.w	r2, r2, #3
 8003458:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_SPI_IRQHandler+0x1fc>)
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe f9c7 	bl	8001802 <HAL_DMA_Abort_IT>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_SPI_IRQHandler+0x1fc>)
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f9b1 	bl	8001802 <HAL_DMA_Abort_IT>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80034b2:	e003      	b.n	80034bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f809 	bl	80034cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034ba:	e000      	b.n	80034be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80034bc:	bf00      	nop
    return;
 80034be:	bf00      	nop
  }
}
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	080034e1 	.word	0x080034e1

080034cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ffe5 	bl	80034cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800351c:	f7fd fff2 	bl	8001504 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	4413      	add	r3, r2
 800352a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800352c:	f7fd ffea 	bl	8001504 <HAL_GetTick>
 8003530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	015b      	lsls	r3, r3, #5
 8003538:	0d1b      	lsrs	r3, r3, #20
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003542:	e054      	b.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d050      	beq.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800354c:	f7fd ffda 	bl	8001504 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	429a      	cmp	r2, r3
 800355a:	d902      	bls.n	8003562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d13d      	bne.n	80035de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d111      	bne.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003584:	d004      	beq.n	8003590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d107      	bne.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a8:	d10f      	bne.n	80035ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e017      	b.n	800360e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	429a      	cmp	r2, r3
 800360a:	d19b      	bne.n	8003544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000000 	.word	0x20000000

0800361c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800362e:	f7fd ff69 	bl	8001504 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800363e:	f7fd ff61 	bl	8001504 <HAL_GetTick>
 8003642:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800364c:	4b3d      	ldr	r3, [pc, #244]	; (8003744 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	00da      	lsls	r2, r3, #3
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	0d1b      	lsrs	r3, r3, #20
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003664:	e060      	b.n	8003728 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800366c:	d107      	bne.n	800367e <SPI_WaitFifoStateUntilTimeout+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800367c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d050      	beq.n	8003728 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003686:	f7fd ff3d 	bl	8001504 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	429a      	cmp	r2, r3
 8003694:	d902      	bls.n	800369c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d13d      	bne.n	8003718 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b4:	d111      	bne.n	80036da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036be:	d004      	beq.n	80036ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c8:	d107      	bne.n	80036da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e2:	d10f      	bne.n	8003704 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003702:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e010      	b.n	800373a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	3b01      	subs	r3, #1
 8003726:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d196      	bne.n	8003666 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000000 	.word	0x20000000

08003748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ff5b 	bl	800361c <SPI_WaitFifoStateUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e027      	b.n	80037cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2200      	movs	r2, #0
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fec0 	bl	800350c <SPI_WaitFlagStateUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e014      	b.n	80037cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f7ff ff34 	bl	800361c <SPI_WaitFifoStateUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e000      	b.n	80037cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e040      	b.n	8003868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fce8 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fc94 	bl	8004140 <UART_SetConfig>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e022      	b.n	8003868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fe92 	bl	8004554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 ff19 	bl	8004698 <UART_CheckIdleState>
 8003866:	4603      	mov	r3, r0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003884:	2b20      	cmp	r3, #32
 8003886:	f040 8082 	bne.w	800398e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_UART_Transmit+0x26>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07a      	b.n	8003990 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Transmit+0x38>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e073      	b.n	8003990 <HAL_UART_Transmit+0x120>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2221      	movs	r2, #33	; 0x21
 80038bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038be:	f7fd fe21 	bl	8001504 <HAL_GetTick>
 80038c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038dc:	d108      	bne.n	80038f0 <HAL_UART_Transmit+0x80>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	e003      	b.n	80038f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003900:	e02d      	b.n	800395e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 ff0c 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e039      	b.n	8003990 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	881a      	ldrh	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800392e:	b292      	uxth	r2, r2
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	3302      	adds	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e008      	b.n	800394c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b292      	uxth	r2, r2
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1cb      	bne.n	8003902 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2200      	movs	r2, #0
 8003972:	2140      	movs	r1, #64	; 0x40
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fed8 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e005      	b.n	8003990 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	f040 80bf 	bne.w	8003b30 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Receive+0x26>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0b7      	b.n	8003b32 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Receive+0x38>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e0b0      	b.n	8003b32 <HAL_UART_Receive+0x19a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2222      	movs	r2, #34	; 0x22
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ec:	f7fd fd8a 	bl	8001504 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0a:	d10e      	bne.n	8003a2a <HAL_UART_Receive+0x92>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_UART_Receive+0x88>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a1e:	e02d      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	22ff      	movs	r2, #255	; 0xff
 8003a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a28:	e028      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_UART_Receive+0xb6>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Receive+0xac>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	22ff      	movs	r2, #255	; 0xff
 8003a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a42:	e01b      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	227f      	movs	r2, #127	; 0x7f
 8003a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a4c:	e016      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a56:	d10d      	bne.n	8003a74 <HAL_UART_Receive+0xdc>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_UART_Receive+0xd2>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	227f      	movs	r2, #127	; 0x7f
 8003a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a68:	e008      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	223f      	movs	r2, #63	; 0x3f
 8003a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a72:	e003      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Receive+0x108>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ab0:	e033      	b.n	8003b1a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2120      	movs	r1, #32
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fe34 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e032      	b.n	8003b32 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	8a7b      	ldrh	r3, [r7, #18]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e00d      	b.n	8003b08 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	8a7b      	ldrh	r3, [r7, #18]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4013      	ands	r3, r2
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1c5      	bne.n	8003ab2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b0ba      	sub	sp, #232	; 0xe8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d115      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00f      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 82a6 	beq.w	80040e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
      }
      return;
 8003ba2:	e2a0      	b.n	80040e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8117 	beq.w	8003ddc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bbe:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_UART_IRQHandler+0x298>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 810a 	beq.w	8003ddc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d011      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xbc>
 8003bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2201      	movs	r2, #1
 8003be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d011      	beq.n	8003c28 <HAL_UART_IRQHandler+0xec>
 8003c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2202      	movs	r2, #2
 8003c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d011      	beq.n	8003c58 <HAL_UART_IRQHandler+0x11c>
 8003c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2204      	movs	r2, #4
 8003c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4e:	f043 0202 	orr.w	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2208      	movs	r2, #8
 8003c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	f043 0208 	orr.w	r2, r3, #8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x18a>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 820c 	beq.w	80040ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d005      	beq.n	8003d1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04f      	beq.n	8003dbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fdc7 	bl	80048b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d141      	bne.n	8003db6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <HAL_UART_IRQHandler+0x29c>)
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fd35 	bl	8001802 <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00f      	b.n	8003dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9b0 	bl	8004114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00b      	b.n	8003dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9ac 	bl	8004114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e007      	b.n	8003dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9a8 	bl	8004114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003dcc:	e18d      	b.n	80040ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dce:	bf00      	nop
    return;
 8003dd0:	e18b      	b.n	80040ea <HAL_UART_IRQHandler+0x5ae>
 8003dd2:	bf00      	nop
 8003dd4:	04000120 	.word	0x04000120
 8003dd8:	08004979 	.word	0x08004979

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8146 	bne.w	8004072 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 813f 	beq.w	8004072 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8138 	beq.w	8004072 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2210      	movs	r2, #16
 8003e08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	f040 80b4 	bne.w	8003f82 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 815f 	beq.w	80040ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	f080 8157 	bcs.w	80040ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8085 	bne.w	8003f66 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1da      	bne.n	8003e5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e1      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3308      	adds	r3, #8
 8003f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e4      	bne.n	8003f26 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd fc10 	bl	8001786 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8d4 	bl	8004128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f80:	e0b5      	b.n	80040ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a7 	beq.w	80040f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a2 	beq.w	80040f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e4      	bne.n	8003fae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004008:	633a      	str	r2, [r7, #48]	; 0x30
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e3      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	60fb      	str	r3, [r7, #12]
   return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	617b      	str	r3, [r7, #20]
   return(result);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e4      	bne.n	800402e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f85c 	bl	8004128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004070:	e03f      	b.n	80040f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00e      	beq.n	800409c <HAL_UART_IRQHandler+0x560>
 800407e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fcaf 	bl	80049f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800409a:	e02d      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01c      	beq.n	80040f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
    }
    return;
 80040c4:	e017      	b.n	80040f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fc60 	bl	80049a4 <UART_EndTransmit_IT>
    return;
 80040e4:	e008      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80040e6:	bf00      	nop
 80040e8:	e006      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80040ea:	bf00      	nop
 80040ec:	e004      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80040f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80040f8:	37e8      	adds	r7, #232	; 0xe8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop

08004100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4313      	orrs	r3, r2
 8004162:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4baf      	ldr	r3, [pc, #700]	; (8004428 <UART_SetConfig+0x2e8>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	69f9      	ldr	r1, [r7, #28]
 8004174:	430b      	orrs	r3, r1
 8004176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4aa4      	ldr	r2, [pc, #656]	; (800442c <UART_SetConfig+0x2ec>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d004      	beq.n	80041a8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a9b      	ldr	r2, [pc, #620]	; (8004430 <UART_SetConfig+0x2f0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d121      	bne.n	800420a <UART_SetConfig+0xca>
 80041c6:	4b9b      	ldr	r3, [pc, #620]	; (8004434 <UART_SetConfig+0x2f4>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d817      	bhi.n	8004204 <UART_SetConfig+0xc4>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x9c>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	080041f3 	.word	0x080041f3
 80041e8:	080041ff 	.word	0x080041ff
 80041ec:	2301      	movs	r3, #1
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	e070      	b.n	80042d4 <UART_SetConfig+0x194>
 80041f2:	2302      	movs	r3, #2
 80041f4:	76fb      	strb	r3, [r7, #27]
 80041f6:	e06d      	b.n	80042d4 <UART_SetConfig+0x194>
 80041f8:	2304      	movs	r3, #4
 80041fa:	76fb      	strb	r3, [r7, #27]
 80041fc:	e06a      	b.n	80042d4 <UART_SetConfig+0x194>
 80041fe:	2308      	movs	r3, #8
 8004200:	76fb      	strb	r3, [r7, #27]
 8004202:	e067      	b.n	80042d4 <UART_SetConfig+0x194>
 8004204:	2310      	movs	r3, #16
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	e064      	b.n	80042d4 <UART_SetConfig+0x194>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a8a      	ldr	r2, [pc, #552]	; (8004438 <UART_SetConfig+0x2f8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d132      	bne.n	800427a <UART_SetConfig+0x13a>
 8004214:	4b87      	ldr	r3, [pc, #540]	; (8004434 <UART_SetConfig+0x2f4>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d828      	bhi.n	8004274 <UART_SetConfig+0x134>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0xe8>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	0800425d 	.word	0x0800425d
 800422c:	08004275 	.word	0x08004275
 8004230:	08004275 	.word	0x08004275
 8004234:	08004275 	.word	0x08004275
 8004238:	08004269 	.word	0x08004269
 800423c:	08004275 	.word	0x08004275
 8004240:	08004275 	.word	0x08004275
 8004244:	08004275 	.word	0x08004275
 8004248:	08004263 	.word	0x08004263
 800424c:	08004275 	.word	0x08004275
 8004250:	08004275 	.word	0x08004275
 8004254:	08004275 	.word	0x08004275
 8004258:	0800426f 	.word	0x0800426f
 800425c:	2300      	movs	r3, #0
 800425e:	76fb      	strb	r3, [r7, #27]
 8004260:	e038      	b.n	80042d4 <UART_SetConfig+0x194>
 8004262:	2302      	movs	r3, #2
 8004264:	76fb      	strb	r3, [r7, #27]
 8004266:	e035      	b.n	80042d4 <UART_SetConfig+0x194>
 8004268:	2304      	movs	r3, #4
 800426a:	76fb      	strb	r3, [r7, #27]
 800426c:	e032      	b.n	80042d4 <UART_SetConfig+0x194>
 800426e:	2308      	movs	r3, #8
 8004270:	76fb      	strb	r3, [r7, #27]
 8004272:	e02f      	b.n	80042d4 <UART_SetConfig+0x194>
 8004274:	2310      	movs	r3, #16
 8004276:	76fb      	strb	r3, [r7, #27]
 8004278:	e02c      	b.n	80042d4 <UART_SetConfig+0x194>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6b      	ldr	r2, [pc, #428]	; (800442c <UART_SetConfig+0x2ec>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d125      	bne.n	80042d0 <UART_SetConfig+0x190>
 8004284:	4b6b      	ldr	r3, [pc, #428]	; (8004434 <UART_SetConfig+0x2f4>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800428e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004292:	d017      	beq.n	80042c4 <UART_SetConfig+0x184>
 8004294:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004298:	d817      	bhi.n	80042ca <UART_SetConfig+0x18a>
 800429a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429e:	d00b      	beq.n	80042b8 <UART_SetConfig+0x178>
 80042a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a4:	d811      	bhi.n	80042ca <UART_SetConfig+0x18a>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <UART_SetConfig+0x172>
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d006      	beq.n	80042be <UART_SetConfig+0x17e>
 80042b0:	e00b      	b.n	80042ca <UART_SetConfig+0x18a>
 80042b2:	2300      	movs	r3, #0
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e00d      	b.n	80042d4 <UART_SetConfig+0x194>
 80042b8:	2302      	movs	r3, #2
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e00a      	b.n	80042d4 <UART_SetConfig+0x194>
 80042be:	2304      	movs	r3, #4
 80042c0:	76fb      	strb	r3, [r7, #27]
 80042c2:	e007      	b.n	80042d4 <UART_SetConfig+0x194>
 80042c4:	2308      	movs	r3, #8
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e004      	b.n	80042d4 <UART_SetConfig+0x194>
 80042ca:	2310      	movs	r3, #16
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e001      	b.n	80042d4 <UART_SetConfig+0x194>
 80042d0:	2310      	movs	r3, #16
 80042d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a54      	ldr	r2, [pc, #336]	; (800442c <UART_SetConfig+0x2ec>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d173      	bne.n	80043c6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042de:	7efb      	ldrb	r3, [r7, #27]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d824      	bhi.n	800432e <UART_SetConfig+0x1ee>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x1ac>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004311 	.word	0x08004311
 80042f0:	0800432f 	.word	0x0800432f
 80042f4:	08004319 	.word	0x08004319
 80042f8:	0800432f 	.word	0x0800432f
 80042fc:	0800431f 	.word	0x0800431f
 8004300:	0800432f 	.word	0x0800432f
 8004304:	0800432f 	.word	0x0800432f
 8004308:	0800432f 	.word	0x0800432f
 800430c:	08004327 	.word	0x08004327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe fa48 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8004314:	6178      	str	r0, [r7, #20]
        break;
 8004316:	e00f      	b.n	8004338 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004318:	4b48      	ldr	r3, [pc, #288]	; (800443c <UART_SetConfig+0x2fc>)
 800431a:	617b      	str	r3, [r7, #20]
        break;
 800431c:	e00c      	b.n	8004338 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431e:	f7fe f9a9 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004322:	6178      	str	r0, [r7, #20]
        break;
 8004324:	e008      	b.n	8004338 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432a:	617b      	str	r3, [r7, #20]
        break;
 800432c:	e004      	b.n	8004338 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	76bb      	strb	r3, [r7, #26]
        break;
 8004336:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80fc 	beq.w	8004538 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	d305      	bcc.n	800435c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	429a      	cmp	r2, r3
 800435a:	d902      	bls.n	8004362 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	76bb      	strb	r3, [r7, #26]
 8004360:	e0ea      	b.n	8004538 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4618      	mov	r0, r3
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	020b      	lsls	r3, r1, #8
 8004374:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004378:	0202      	lsls	r2, r0, #8
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	6849      	ldr	r1, [r1, #4]
 800437e:	0849      	lsrs	r1, r1, #1
 8004380:	4608      	mov	r0, r1
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	1814      	adds	r4, r2, r0
 8004388:	eb43 0501 	adc.w	r5, r3, r1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	461a      	mov	r2, r3
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	4620      	mov	r0, r4
 8004398:	4629      	mov	r1, r5
 800439a:	f7fb ff69 	bl	8000270 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4613      	mov	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ac:	d308      	bcc.n	80043c0 <UART_SetConfig+0x280>
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b4:	d204      	bcs.n	80043c0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	e0bb      	b.n	8004538 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	76bb      	strb	r3, [r7, #26]
 80043c4:	e0b8      	b.n	8004538 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d167      	bne.n	80044a0 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 80043d0:	7efb      	ldrb	r3, [r7, #27]
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d834      	bhi.n	8004440 <UART_SetConfig+0x300>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x29c>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004409 	.word	0x08004409
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004441 	.word	0x08004441
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004441 	.word	0x08004441
 80043f4:	08004441 	.word	0x08004441
 80043f8:	08004441 	.word	0x08004441
 80043fc:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fe f9d0 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8004404:	6178      	str	r0, [r7, #20]
        break;
 8004406:	e020      	b.n	800444a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7fe f9e2 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 800440c:	6178      	str	r0, [r7, #20]
        break;
 800440e:	e01c      	b.n	800444a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <UART_SetConfig+0x2fc>)
 8004412:	617b      	str	r3, [r7, #20]
        break;
 8004414:	e019      	b.n	800444a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7fe f92d 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800441a:	6178      	str	r0, [r7, #20]
        break;
 800441c:	e015      	b.n	800444a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	617b      	str	r3, [r7, #20]
        break;
 8004424:	e011      	b.n	800444a <UART_SetConfig+0x30a>
 8004426:	bf00      	nop
 8004428:	efff69f3 	.word	0xefff69f3
 800442c:	40008000 	.word	0x40008000
 8004430:	40013800 	.word	0x40013800
 8004434:	40021000 	.word	0x40021000
 8004438:	40004400 	.word	0x40004400
 800443c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	76bb      	strb	r3, [r7, #26]
        break;
 8004448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d073      	beq.n	8004538 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	005a      	lsls	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b0f      	cmp	r3, #15
 800446a:	d916      	bls.n	800449a <UART_SetConfig+0x35a>
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d212      	bcs.n	800449a <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f023 030f 	bic.w	r3, r3, #15
 800447c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	b29b      	uxth	r3, r3
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	b29a      	uxth	r2, r3
 800448a:	89fb      	ldrh	r3, [r7, #14]
 800448c:	4313      	orrs	r3, r2
 800448e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	89fa      	ldrh	r2, [r7, #14]
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	e04e      	b.n	8004538 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	76bb      	strb	r3, [r7, #26]
 800449e:	e04b      	b.n	8004538 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a0:	7efb      	ldrb	r3, [r7, #27]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d827      	bhi.n	80044f6 <UART_SetConfig+0x3b6>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x36c>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe f968 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80044d4:	6178      	str	r0, [r7, #20]
        break;
 80044d6:	e013      	b.n	8004500 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fe f97a 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 80044dc:	6178      	str	r0, [r7, #20]
        break;
 80044de:	e00f      	b.n	8004500 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <UART_SetConfig+0x410>)
 80044e2:	617b      	str	r3, [r7, #20]
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fe f8c5 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80044ea:	6178      	str	r0, [r7, #20]
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	617b      	str	r3, [r7, #20]
        break;
 80044f4:	e004      	b.n	8004500 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	76bb      	strb	r3, [r7, #26]
        break;
 80044fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	085a      	lsrs	r2, r3, #1
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b0f      	cmp	r3, #15
 800451e:	d909      	bls.n	8004534 <UART_SetConfig+0x3f4>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d205      	bcs.n	8004534 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e001      	b.n	8004538 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004544:	7ebb      	ldrb	r3, [r7, #26]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bdb0      	pop	{r4, r5, r7, pc}
 800454e:	bf00      	nop
 8004550:	00f42400 	.word	0x00f42400

08004554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01a      	beq.n	800466a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d10a      	bne.n	800466a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a8:	f7fc ff2c 	bl	8001504 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d10e      	bne.n	80046da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f82d 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e023      	b.n	8004722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d10e      	bne.n	8004706 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f817 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e00d      	b.n	8004722 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b09c      	sub	sp, #112	; 0x70
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473a:	e0a5      	b.n	8004888 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	f000 80a1 	beq.w	8004888 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fc fedd 	bl	8001504 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <UART_WaitOnFlagUntilTimeout+0x32>
 8004756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004758:	2b00      	cmp	r3, #0
 800475a:	d13e      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800476a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004770:	667b      	str	r3, [r7, #100]	; 0x64
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800477a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800477c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e6      	bne.n	800475c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3308      	adds	r3, #8
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	663b      	str	r3, [r7, #96]	; 0x60
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3308      	adds	r3, #8
 80047ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80047b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e5      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e067      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d04f      	beq.n	8004888 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f6:	d147      	bne.n	8004888 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004800:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004816:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
 8004822:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e6      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	613b      	str	r3, [r7, #16]
   return(result);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	66bb      	str	r3, [r7, #104]	; 0x68
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004854:	623a      	str	r2, [r7, #32]
 8004856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	69f9      	ldr	r1, [r7, #28]
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	61bb      	str	r3, [r7, #24]
   return(result);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e010      	b.n	80048aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	f43f af4a 	beq.w	800473c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3770      	adds	r7, #112	; 0x70
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b095      	sub	sp, #84	; 0x54
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
 80048da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	64bb      	str	r3, [r7, #72]	; 0x48
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004924:	2b01      	cmp	r3, #1
 8004926:	d118      	bne.n	800495a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	60bb      	str	r3, [r7, #8]
   return(result);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f023 0310 	bic.w	r3, r3, #16
 800493c:	647b      	str	r3, [r7, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6979      	ldr	r1, [r7, #20]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	613b      	str	r3, [r7, #16]
   return(result);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e6      	bne.n	8004928 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800496c:	bf00      	nop
 800496e:	3754      	adds	r7, #84	; 0x54
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff fbbc 	bl	8004114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	613b      	str	r3, [r7, #16]
   return(result);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fb88 	bl	8004100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f0:	bf00      	nop
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <__errno>:
 8004a0c:	4b01      	ldr	r3, [pc, #4]	; (8004a14 <__errno+0x8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	; (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	; (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	; (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	; (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f001 f8ba 	bl	8005ba4 <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08005db0 	.word	0x08005db0
 8004a54:	08005db0 	.word	0x08005db0
 8004a58:	08005db0 	.word	0x08005db0
 8004a5c:	08005db4 	.word	0x08005db4

08004a60 <memset>:
 8004a60:	4402      	add	r2, r0
 8004a62:	4603      	mov	r3, r0
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d100      	bne.n	8004a6a <memset+0xa>
 8004a68:	4770      	bx	lr
 8004a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6e:	e7f9      	b.n	8004a64 <memset+0x4>

08004a70 <iprintf>:
 8004a70:	b40f      	push	{r0, r1, r2, r3}
 8004a72:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <iprintf+0x2c>)
 8004a74:	b513      	push	{r0, r1, r4, lr}
 8004a76:	681c      	ldr	r4, [r3, #0]
 8004a78:	b124      	cbz	r4, 8004a84 <iprintf+0x14>
 8004a7a:	69a3      	ldr	r3, [r4, #24]
 8004a7c:	b913      	cbnz	r3, 8004a84 <iprintf+0x14>
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f000 fb24 	bl	80050cc <__sinit>
 8004a84:	ab05      	add	r3, sp, #20
 8004a86:	9a04      	ldr	r2, [sp, #16]
 8004a88:	68a1      	ldr	r1, [r4, #8]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 fcfd 	bl	800548c <_vfiprintf_r>
 8004a92:	b002      	add	sp, #8
 8004a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a98:	b004      	add	sp, #16
 8004a9a:	4770      	bx	lr
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <_puts_r>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	460e      	mov	r6, r1
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	b118      	cbz	r0, 8004ab0 <_puts_r+0x10>
 8004aa8:	6983      	ldr	r3, [r0, #24]
 8004aaa:	b90b      	cbnz	r3, 8004ab0 <_puts_r+0x10>
 8004aac:	f000 fb0e 	bl	80050cc <__sinit>
 8004ab0:	69ab      	ldr	r3, [r5, #24]
 8004ab2:	68ac      	ldr	r4, [r5, #8]
 8004ab4:	b913      	cbnz	r3, 8004abc <_puts_r+0x1c>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 fb08 	bl	80050cc <__sinit>
 8004abc:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <_puts_r+0xd0>)
 8004abe:	429c      	cmp	r4, r3
 8004ac0:	d120      	bne.n	8004b04 <_puts_r+0x64>
 8004ac2:	686c      	ldr	r4, [r5, #4]
 8004ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ac6:	07db      	lsls	r3, r3, #31
 8004ac8:	d405      	bmi.n	8004ad6 <_puts_r+0x36>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	0598      	lsls	r0, r3, #22
 8004ace:	d402      	bmi.n	8004ad6 <_puts_r+0x36>
 8004ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad2:	f000 fb99 	bl	8005208 <__retarget_lock_acquire_recursive>
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	0719      	lsls	r1, r3, #28
 8004ada:	d51d      	bpl.n	8004b18 <_puts_r+0x78>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	b1db      	cbz	r3, 8004b18 <_puts_r+0x78>
 8004ae0:	3e01      	subs	r6, #1
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60a3      	str	r3, [r4, #8]
 8004aec:	bb39      	cbnz	r1, 8004b3e <_puts_r+0x9e>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da38      	bge.n	8004b64 <_puts_r+0xc4>
 8004af2:	4622      	mov	r2, r4
 8004af4:	210a      	movs	r1, #10
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f90e 	bl	8004d18 <__swbuf_r>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d011      	beq.n	8004b24 <_puts_r+0x84>
 8004b00:	250a      	movs	r5, #10
 8004b02:	e011      	b.n	8004b28 <_puts_r+0x88>
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <_puts_r+0xd4>)
 8004b06:	429c      	cmp	r4, r3
 8004b08:	d101      	bne.n	8004b0e <_puts_r+0x6e>
 8004b0a:	68ac      	ldr	r4, [r5, #8]
 8004b0c:	e7da      	b.n	8004ac4 <_puts_r+0x24>
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <_puts_r+0xd8>)
 8004b10:	429c      	cmp	r4, r3
 8004b12:	bf08      	it	eq
 8004b14:	68ec      	ldreq	r4, [r5, #12]
 8004b16:	e7d5      	b.n	8004ac4 <_puts_r+0x24>
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f000 f94e 	bl	8004dbc <__swsetup_r>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d0dd      	beq.n	8004ae0 <_puts_r+0x40>
 8004b24:	f04f 35ff 	mov.w	r5, #4294967295
 8004b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b2a:	07da      	lsls	r2, r3, #31
 8004b2c:	d405      	bmi.n	8004b3a <_puts_r+0x9a>
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	059b      	lsls	r3, r3, #22
 8004b32:	d402      	bmi.n	8004b3a <_puts_r+0x9a>
 8004b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b36:	f000 fb68 	bl	800520a <__retarget_lock_release_recursive>
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da04      	bge.n	8004b4c <_puts_r+0xac>
 8004b42:	69a2      	ldr	r2, [r4, #24]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	dc06      	bgt.n	8004b56 <_puts_r+0xb6>
 8004b48:	290a      	cmp	r1, #10
 8004b4a:	d004      	beq.n	8004b56 <_puts_r+0xb6>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	6022      	str	r2, [r4, #0]
 8004b52:	7019      	strb	r1, [r3, #0]
 8004b54:	e7c5      	b.n	8004ae2 <_puts_r+0x42>
 8004b56:	4622      	mov	r2, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 f8dd 	bl	8004d18 <__swbuf_r>
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d1bf      	bne.n	8004ae2 <_puts_r+0x42>
 8004b62:	e7df      	b.n	8004b24 <_puts_r+0x84>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	250a      	movs	r5, #10
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	6022      	str	r2, [r4, #0]
 8004b6c:	701d      	strb	r5, [r3, #0]
 8004b6e:	e7db      	b.n	8004b28 <_puts_r+0x88>
 8004b70:	08005d34 	.word	0x08005d34
 8004b74:	08005d54 	.word	0x08005d54
 8004b78:	08005d14 	.word	0x08005d14

08004b7c <puts>:
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <puts+0xc>)
 8004b7e:	4601      	mov	r1, r0
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f7ff bf8d 	b.w	8004aa0 <_puts_r>
 8004b86:	bf00      	nop
 8004b88:	2000000c 	.word	0x2000000c

08004b8c <setvbuf>:
 8004b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b90:	461d      	mov	r5, r3
 8004b92:	4b5d      	ldr	r3, [pc, #372]	; (8004d08 <setvbuf+0x17c>)
 8004b94:	681f      	ldr	r7, [r3, #0]
 8004b96:	4604      	mov	r4, r0
 8004b98:	460e      	mov	r6, r1
 8004b9a:	4690      	mov	r8, r2
 8004b9c:	b127      	cbz	r7, 8004ba8 <setvbuf+0x1c>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	b913      	cbnz	r3, 8004ba8 <setvbuf+0x1c>
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	f000 fa92 	bl	80050cc <__sinit>
 8004ba8:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <setvbuf+0x180>)
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d167      	bne.n	8004c7e <setvbuf+0xf2>
 8004bae:	687c      	ldr	r4, [r7, #4]
 8004bb0:	f1b8 0f02 	cmp.w	r8, #2
 8004bb4:	d006      	beq.n	8004bc4 <setvbuf+0x38>
 8004bb6:	f1b8 0f01 	cmp.w	r8, #1
 8004bba:	f200 809f 	bhi.w	8004cfc <setvbuf+0x170>
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	f2c0 809c 	blt.w	8004cfc <setvbuf+0x170>
 8004bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bc6:	07db      	lsls	r3, r3, #31
 8004bc8:	d405      	bmi.n	8004bd6 <setvbuf+0x4a>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	0598      	lsls	r0, r3, #22
 8004bce:	d402      	bmi.n	8004bd6 <setvbuf+0x4a>
 8004bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd2:	f000 fb19 	bl	8005208 <__retarget_lock_acquire_recursive>
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f000 f9e3 	bl	8004fa4 <_fflush_r>
 8004bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004be0:	b141      	cbz	r1, 8004bf4 <setvbuf+0x68>
 8004be2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be6:	4299      	cmp	r1, r3
 8004be8:	d002      	beq.n	8004bf0 <setvbuf+0x64>
 8004bea:	4638      	mov	r0, r7
 8004bec:	f000 fb7a 	bl	80052e4 <_free_r>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6363      	str	r3, [r4, #52]	; 0x34
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61a3      	str	r3, [r4, #24]
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	0619      	lsls	r1, r3, #24
 8004bfe:	d503      	bpl.n	8004c08 <setvbuf+0x7c>
 8004c00:	6921      	ldr	r1, [r4, #16]
 8004c02:	4638      	mov	r0, r7
 8004c04:	f000 fb6e 	bl	80052e4 <_free_r>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	f1b8 0f02 	cmp.w	r8, #2
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	d06c      	beq.n	8004cf4 <setvbuf+0x168>
 8004c1a:	ab01      	add	r3, sp, #4
 8004c1c:	466a      	mov	r2, sp
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4638      	mov	r0, r7
 8004c22:	f000 faf3 	bl	800520c <__swhatbuf_r>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	4318      	orrs	r0, r3
 8004c2a:	81a0      	strh	r0, [r4, #12]
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	d130      	bne.n	8004c92 <setvbuf+0x106>
 8004c30:	9d00      	ldr	r5, [sp, #0]
 8004c32:	4628      	mov	r0, r5
 8004c34:	f000 fb4e 	bl	80052d4 <malloc>
 8004c38:	4606      	mov	r6, r0
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d155      	bne.n	8004cea <setvbuf+0x15e>
 8004c3e:	f8dd 9000 	ldr.w	r9, [sp]
 8004c42:	45a9      	cmp	r9, r5
 8004c44:	d14a      	bne.n	8004cdc <setvbuf+0x150>
 8004c46:	f04f 35ff 	mov.w	r5, #4294967295
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60a2      	str	r2, [r4, #8]
 8004c4e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004c52:	6022      	str	r2, [r4, #0]
 8004c54:	6122      	str	r2, [r4, #16]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c5c:	6162      	str	r2, [r4, #20]
 8004c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c60:	f043 0302 	orr.w	r3, r3, #2
 8004c64:	07d2      	lsls	r2, r2, #31
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	d405      	bmi.n	8004c76 <setvbuf+0xea>
 8004c6a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c6e:	d102      	bne.n	8004c76 <setvbuf+0xea>
 8004c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c72:	f000 faca 	bl	800520a <__retarget_lock_release_recursive>
 8004c76:	4628      	mov	r0, r5
 8004c78:	b003      	add	sp, #12
 8004c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <setvbuf+0x184>)
 8004c80:	429c      	cmp	r4, r3
 8004c82:	d101      	bne.n	8004c88 <setvbuf+0xfc>
 8004c84:	68bc      	ldr	r4, [r7, #8]
 8004c86:	e793      	b.n	8004bb0 <setvbuf+0x24>
 8004c88:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <setvbuf+0x188>)
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	bf08      	it	eq
 8004c8e:	68fc      	ldreq	r4, [r7, #12]
 8004c90:	e78e      	b.n	8004bb0 <setvbuf+0x24>
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d0cd      	beq.n	8004c32 <setvbuf+0xa6>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	b913      	cbnz	r3, 8004ca0 <setvbuf+0x114>
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f000 fa16 	bl	80050cc <__sinit>
 8004ca0:	f1b8 0f01 	cmp.w	r8, #1
 8004ca4:	bf08      	it	eq
 8004ca6:	89a3      	ldrheq	r3, [r4, #12]
 8004ca8:	6026      	str	r6, [r4, #0]
 8004caa:	bf04      	itt	eq
 8004cac:	f043 0301 	orreq.w	r3, r3, #1
 8004cb0:	81a3      	strheq	r3, [r4, #12]
 8004cb2:	89a2      	ldrh	r2, [r4, #12]
 8004cb4:	f012 0308 	ands.w	r3, r2, #8
 8004cb8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004cbc:	d01c      	beq.n	8004cf8 <setvbuf+0x16c>
 8004cbe:	07d3      	lsls	r3, r2, #31
 8004cc0:	bf41      	itttt	mi
 8004cc2:	2300      	movmi	r3, #0
 8004cc4:	426d      	negmi	r5, r5
 8004cc6:	60a3      	strmi	r3, [r4, #8]
 8004cc8:	61a5      	strmi	r5, [r4, #24]
 8004cca:	bf58      	it	pl
 8004ccc:	60a5      	strpl	r5, [r4, #8]
 8004cce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004cd0:	f015 0501 	ands.w	r5, r5, #1
 8004cd4:	d115      	bne.n	8004d02 <setvbuf+0x176>
 8004cd6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004cda:	e7c8      	b.n	8004c6e <setvbuf+0xe2>
 8004cdc:	4648      	mov	r0, r9
 8004cde:	f000 faf9 	bl	80052d4 <malloc>
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0ae      	beq.n	8004c46 <setvbuf+0xba>
 8004ce8:	464d      	mov	r5, r9
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e7d0      	b.n	8004c96 <setvbuf+0x10a>
 8004cf4:	2500      	movs	r5, #0
 8004cf6:	e7a8      	b.n	8004c4a <setvbuf+0xbe>
 8004cf8:	60a3      	str	r3, [r4, #8]
 8004cfa:	e7e8      	b.n	8004cce <setvbuf+0x142>
 8004cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8004d00:	e7b9      	b.n	8004c76 <setvbuf+0xea>
 8004d02:	2500      	movs	r5, #0
 8004d04:	e7b7      	b.n	8004c76 <setvbuf+0xea>
 8004d06:	bf00      	nop
 8004d08:	2000000c 	.word	0x2000000c
 8004d0c:	08005d34 	.word	0x08005d34
 8004d10:	08005d54 	.word	0x08005d54
 8004d14:	08005d14 	.word	0x08005d14

08004d18 <__swbuf_r>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	460e      	mov	r6, r1
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	4605      	mov	r5, r0
 8004d20:	b118      	cbz	r0, 8004d2a <__swbuf_r+0x12>
 8004d22:	6983      	ldr	r3, [r0, #24]
 8004d24:	b90b      	cbnz	r3, 8004d2a <__swbuf_r+0x12>
 8004d26:	f000 f9d1 	bl	80050cc <__sinit>
 8004d2a:	4b21      	ldr	r3, [pc, #132]	; (8004db0 <__swbuf_r+0x98>)
 8004d2c:	429c      	cmp	r4, r3
 8004d2e:	d12b      	bne.n	8004d88 <__swbuf_r+0x70>
 8004d30:	686c      	ldr	r4, [r5, #4]
 8004d32:	69a3      	ldr	r3, [r4, #24]
 8004d34:	60a3      	str	r3, [r4, #8]
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	071a      	lsls	r2, r3, #28
 8004d3a:	d52f      	bpl.n	8004d9c <__swbuf_r+0x84>
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	b36b      	cbz	r3, 8004d9c <__swbuf_r+0x84>
 8004d40:	6923      	ldr	r3, [r4, #16]
 8004d42:	6820      	ldr	r0, [r4, #0]
 8004d44:	1ac0      	subs	r0, r0, r3
 8004d46:	6963      	ldr	r3, [r4, #20]
 8004d48:	b2f6      	uxtb	r6, r6
 8004d4a:	4283      	cmp	r3, r0
 8004d4c:	4637      	mov	r7, r6
 8004d4e:	dc04      	bgt.n	8004d5a <__swbuf_r+0x42>
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 f926 	bl	8004fa4 <_fflush_r>
 8004d58:	bb30      	cbnz	r0, 8004da8 <__swbuf_r+0x90>
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	60a3      	str	r3, [r4, #8]
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	6022      	str	r2, [r4, #0]
 8004d66:	701e      	strb	r6, [r3, #0]
 8004d68:	6963      	ldr	r3, [r4, #20]
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	4283      	cmp	r3, r0
 8004d6e:	d004      	beq.n	8004d7a <__swbuf_r+0x62>
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	07db      	lsls	r3, r3, #31
 8004d74:	d506      	bpl.n	8004d84 <__swbuf_r+0x6c>
 8004d76:	2e0a      	cmp	r6, #10
 8004d78:	d104      	bne.n	8004d84 <__swbuf_r+0x6c>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 f911 	bl	8004fa4 <_fflush_r>
 8004d82:	b988      	cbnz	r0, 8004da8 <__swbuf_r+0x90>
 8004d84:	4638      	mov	r0, r7
 8004d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <__swbuf_r+0x9c>)
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d101      	bne.n	8004d92 <__swbuf_r+0x7a>
 8004d8e:	68ac      	ldr	r4, [r5, #8]
 8004d90:	e7cf      	b.n	8004d32 <__swbuf_r+0x1a>
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <__swbuf_r+0xa0>)
 8004d94:	429c      	cmp	r4, r3
 8004d96:	bf08      	it	eq
 8004d98:	68ec      	ldreq	r4, [r5, #12]
 8004d9a:	e7ca      	b.n	8004d32 <__swbuf_r+0x1a>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 f80c 	bl	8004dbc <__swsetup_r>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d0cb      	beq.n	8004d40 <__swbuf_r+0x28>
 8004da8:	f04f 37ff 	mov.w	r7, #4294967295
 8004dac:	e7ea      	b.n	8004d84 <__swbuf_r+0x6c>
 8004dae:	bf00      	nop
 8004db0:	08005d34 	.word	0x08005d34
 8004db4:	08005d54 	.word	0x08005d54
 8004db8:	08005d14 	.word	0x08005d14

08004dbc <__swsetup_r>:
 8004dbc:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <__swsetup_r+0xcc>)
 8004dbe:	b570      	push	{r4, r5, r6, lr}
 8004dc0:	681d      	ldr	r5, [r3, #0]
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	b125      	cbz	r5, 8004dd2 <__swsetup_r+0x16>
 8004dc8:	69ab      	ldr	r3, [r5, #24]
 8004dca:	b913      	cbnz	r3, 8004dd2 <__swsetup_r+0x16>
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f000 f97d 	bl	80050cc <__sinit>
 8004dd2:	4b2e      	ldr	r3, [pc, #184]	; (8004e8c <__swsetup_r+0xd0>)
 8004dd4:	429c      	cmp	r4, r3
 8004dd6:	d10f      	bne.n	8004df8 <__swsetup_r+0x3c>
 8004dd8:	686c      	ldr	r4, [r5, #4]
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004de0:	0719      	lsls	r1, r3, #28
 8004de2:	d42c      	bmi.n	8004e3e <__swsetup_r+0x82>
 8004de4:	06dd      	lsls	r5, r3, #27
 8004de6:	d411      	bmi.n	8004e0c <__swsetup_r+0x50>
 8004de8:	2309      	movs	r3, #9
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	e03e      	b.n	8004e76 <__swsetup_r+0xba>
 8004df8:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <__swsetup_r+0xd4>)
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	d101      	bne.n	8004e02 <__swsetup_r+0x46>
 8004dfe:	68ac      	ldr	r4, [r5, #8]
 8004e00:	e7eb      	b.n	8004dda <__swsetup_r+0x1e>
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <__swsetup_r+0xd8>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	bf08      	it	eq
 8004e08:	68ec      	ldreq	r4, [r5, #12]
 8004e0a:	e7e6      	b.n	8004dda <__swsetup_r+0x1e>
 8004e0c:	0758      	lsls	r0, r3, #29
 8004e0e:	d512      	bpl.n	8004e36 <__swsetup_r+0x7a>
 8004e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e12:	b141      	cbz	r1, 8004e26 <__swsetup_r+0x6a>
 8004e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e18:	4299      	cmp	r1, r3
 8004e1a:	d002      	beq.n	8004e22 <__swsetup_r+0x66>
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f000 fa61 	bl	80052e4 <_free_r>
 8004e22:	2300      	movs	r3, #0
 8004e24:	6363      	str	r3, [r4, #52]	; 0x34
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	b94b      	cbnz	r3, 8004e56 <__swsetup_r+0x9a>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4c:	d003      	beq.n	8004e56 <__swsetup_r+0x9a>
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4630      	mov	r0, r6
 8004e52:	f000 f9ff 	bl	8005254 <__smakebuf_r>
 8004e56:	89a0      	ldrh	r0, [r4, #12]
 8004e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e5c:	f010 0301 	ands.w	r3, r0, #1
 8004e60:	d00a      	beq.n	8004e78 <__swsetup_r+0xbc>
 8004e62:	2300      	movs	r3, #0
 8004e64:	60a3      	str	r3, [r4, #8]
 8004e66:	6963      	ldr	r3, [r4, #20]
 8004e68:	425b      	negs	r3, r3
 8004e6a:	61a3      	str	r3, [r4, #24]
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	b943      	cbnz	r3, 8004e82 <__swsetup_r+0xc6>
 8004e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e74:	d1ba      	bne.n	8004dec <__swsetup_r+0x30>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	0781      	lsls	r1, r0, #30
 8004e7a:	bf58      	it	pl
 8004e7c:	6963      	ldrpl	r3, [r4, #20]
 8004e7e:	60a3      	str	r3, [r4, #8]
 8004e80:	e7f4      	b.n	8004e6c <__swsetup_r+0xb0>
 8004e82:	2000      	movs	r0, #0
 8004e84:	e7f7      	b.n	8004e76 <__swsetup_r+0xba>
 8004e86:	bf00      	nop
 8004e88:	2000000c 	.word	0x2000000c
 8004e8c:	08005d34 	.word	0x08005d34
 8004e90:	08005d54 	.word	0x08005d54
 8004e94:	08005d14 	.word	0x08005d14

08004e98 <__sflush_r>:
 8004e98:	898a      	ldrh	r2, [r1, #12]
 8004e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	0710      	lsls	r0, r2, #28
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	d458      	bmi.n	8004f58 <__sflush_r+0xc0>
 8004ea6:	684b      	ldr	r3, [r1, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	dc05      	bgt.n	8004eb8 <__sflush_r+0x20>
 8004eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	dc02      	bgt.n	8004eb8 <__sflush_r+0x20>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	d0f9      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ec4:	682f      	ldr	r7, [r5, #0]
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	d032      	beq.n	8004f30 <__sflush_r+0x98>
 8004eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	075a      	lsls	r2, r3, #29
 8004ed0:	d505      	bpl.n	8004ede <__sflush_r+0x46>
 8004ed2:	6863      	ldr	r3, [r4, #4]
 8004ed4:	1ac0      	subs	r0, r0, r3
 8004ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ed8:	b10b      	cbz	r3, 8004ede <__sflush_r+0x46>
 8004eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004edc:	1ac0      	subs	r0, r0, r3
 8004ede:	2300      	movs	r3, #0
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ee4:	6a21      	ldr	r1, [r4, #32]
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b0      	blx	r6
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	d106      	bne.n	8004efe <__sflush_r+0x66>
 8004ef0:	6829      	ldr	r1, [r5, #0]
 8004ef2:	291d      	cmp	r1, #29
 8004ef4:	d82c      	bhi.n	8004f50 <__sflush_r+0xb8>
 8004ef6:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <__sflush_r+0x108>)
 8004ef8:	40ca      	lsrs	r2, r1
 8004efa:	07d6      	lsls	r6, r2, #31
 8004efc:	d528      	bpl.n	8004f50 <__sflush_r+0xb8>
 8004efe:	2200      	movs	r2, #0
 8004f00:	6062      	str	r2, [r4, #4]
 8004f02:	04d9      	lsls	r1, r3, #19
 8004f04:	6922      	ldr	r2, [r4, #16]
 8004f06:	6022      	str	r2, [r4, #0]
 8004f08:	d504      	bpl.n	8004f14 <__sflush_r+0x7c>
 8004f0a:	1c42      	adds	r2, r0, #1
 8004f0c:	d101      	bne.n	8004f12 <__sflush_r+0x7a>
 8004f0e:	682b      	ldr	r3, [r5, #0]
 8004f10:	b903      	cbnz	r3, 8004f14 <__sflush_r+0x7c>
 8004f12:	6560      	str	r0, [r4, #84]	; 0x54
 8004f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f16:	602f      	str	r7, [r5, #0]
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	d0ca      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f20:	4299      	cmp	r1, r3
 8004f22:	d002      	beq.n	8004f2a <__sflush_r+0x92>
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f9dd 	bl	80052e4 <_free_r>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004f2e:	e7c1      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f30:	6a21      	ldr	r1, [r4, #32]
 8004f32:	2301      	movs	r3, #1
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b0      	blx	r6
 8004f38:	1c41      	adds	r1, r0, #1
 8004f3a:	d1c7      	bne.n	8004ecc <__sflush_r+0x34>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0c4      	beq.n	8004ecc <__sflush_r+0x34>
 8004f42:	2b1d      	cmp	r3, #29
 8004f44:	d001      	beq.n	8004f4a <__sflush_r+0xb2>
 8004f46:	2b16      	cmp	r3, #22
 8004f48:	d101      	bne.n	8004f4e <__sflush_r+0xb6>
 8004f4a:	602f      	str	r7, [r5, #0]
 8004f4c:	e7b1      	b.n	8004eb2 <__sflush_r+0x1a>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	e7ad      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f58:	690f      	ldr	r7, [r1, #16]
 8004f5a:	2f00      	cmp	r7, #0
 8004f5c:	d0a9      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004f5e:	0793      	lsls	r3, r2, #30
 8004f60:	680e      	ldr	r6, [r1, #0]
 8004f62:	bf08      	it	eq
 8004f64:	694b      	ldreq	r3, [r1, #20]
 8004f66:	600f      	str	r7, [r1, #0]
 8004f68:	bf18      	it	ne
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	eba6 0807 	sub.w	r8, r6, r7
 8004f70:	608b      	str	r3, [r1, #8]
 8004f72:	f1b8 0f00 	cmp.w	r8, #0
 8004f76:	dd9c      	ble.n	8004eb2 <__sflush_r+0x1a>
 8004f78:	6a21      	ldr	r1, [r4, #32]
 8004f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	463a      	mov	r2, r7
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b0      	blx	r6
 8004f84:	2800      	cmp	r0, #0
 8004f86:	dc06      	bgt.n	8004f96 <__sflush_r+0xfe>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	e78e      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f96:	4407      	add	r7, r0
 8004f98:	eba8 0800 	sub.w	r8, r8, r0
 8004f9c:	e7e9      	b.n	8004f72 <__sflush_r+0xda>
 8004f9e:	bf00      	nop
 8004fa0:	20400001 	.word	0x20400001

08004fa4 <_fflush_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	690b      	ldr	r3, [r1, #16]
 8004fa8:	4605      	mov	r5, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	b913      	cbnz	r3, 8004fb4 <_fflush_r+0x10>
 8004fae:	2500      	movs	r5, #0
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	b118      	cbz	r0, 8004fbe <_fflush_r+0x1a>
 8004fb6:	6983      	ldr	r3, [r0, #24]
 8004fb8:	b90b      	cbnz	r3, 8004fbe <_fflush_r+0x1a>
 8004fba:	f000 f887 	bl	80050cc <__sinit>
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <_fflush_r+0x6c>)
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	d11b      	bne.n	8004ffc <_fflush_r+0x58>
 8004fc4:	686c      	ldr	r4, [r5, #4]
 8004fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ef      	beq.n	8004fae <_fflush_r+0xa>
 8004fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fd0:	07d0      	lsls	r0, r2, #31
 8004fd2:	d404      	bmi.n	8004fde <_fflush_r+0x3a>
 8004fd4:	0599      	lsls	r1, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_fflush_r+0x3a>
 8004fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fda:	f000 f915 	bl	8005208 <__retarget_lock_acquire_recursive>
 8004fde:	4628      	mov	r0, r5
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	f7ff ff59 	bl	8004e98 <__sflush_r>
 8004fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe8:	07da      	lsls	r2, r3, #31
 8004fea:	4605      	mov	r5, r0
 8004fec:	d4e0      	bmi.n	8004fb0 <_fflush_r+0xc>
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	059b      	lsls	r3, r3, #22
 8004ff2:	d4dd      	bmi.n	8004fb0 <_fflush_r+0xc>
 8004ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff6:	f000 f908 	bl	800520a <__retarget_lock_release_recursive>
 8004ffa:	e7d9      	b.n	8004fb0 <_fflush_r+0xc>
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <_fflush_r+0x70>)
 8004ffe:	429c      	cmp	r4, r3
 8005000:	d101      	bne.n	8005006 <_fflush_r+0x62>
 8005002:	68ac      	ldr	r4, [r5, #8]
 8005004:	e7df      	b.n	8004fc6 <_fflush_r+0x22>
 8005006:	4b04      	ldr	r3, [pc, #16]	; (8005018 <_fflush_r+0x74>)
 8005008:	429c      	cmp	r4, r3
 800500a:	bf08      	it	eq
 800500c:	68ec      	ldreq	r4, [r5, #12]
 800500e:	e7da      	b.n	8004fc6 <_fflush_r+0x22>
 8005010:	08005d34 	.word	0x08005d34
 8005014:	08005d54 	.word	0x08005d54
 8005018:	08005d14 	.word	0x08005d14

0800501c <std>:
 800501c:	2300      	movs	r3, #0
 800501e:	b510      	push	{r4, lr}
 8005020:	4604      	mov	r4, r0
 8005022:	e9c0 3300 	strd	r3, r3, [r0]
 8005026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800502a:	6083      	str	r3, [r0, #8]
 800502c:	8181      	strh	r1, [r0, #12]
 800502e:	6643      	str	r3, [r0, #100]	; 0x64
 8005030:	81c2      	strh	r2, [r0, #14]
 8005032:	6183      	str	r3, [r0, #24]
 8005034:	4619      	mov	r1, r3
 8005036:	2208      	movs	r2, #8
 8005038:	305c      	adds	r0, #92	; 0x5c
 800503a:	f7ff fd11 	bl	8004a60 <memset>
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <std+0x38>)
 8005040:	6263      	str	r3, [r4, #36]	; 0x24
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <std+0x3c>)
 8005044:	62a3      	str	r3, [r4, #40]	; 0x28
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <std+0x40>)
 8005048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <std+0x44>)
 800504c:	6224      	str	r4, [r4, #32]
 800504e:	6323      	str	r3, [r4, #48]	; 0x30
 8005050:	bd10      	pop	{r4, pc}
 8005052:	bf00      	nop
 8005054:	08005a35 	.word	0x08005a35
 8005058:	08005a57 	.word	0x08005a57
 800505c:	08005a8f 	.word	0x08005a8f
 8005060:	08005ab3 	.word	0x08005ab3

08005064 <_cleanup_r>:
 8005064:	4901      	ldr	r1, [pc, #4]	; (800506c <_cleanup_r+0x8>)
 8005066:	f000 b8af 	b.w	80051c8 <_fwalk_reent>
 800506a:	bf00      	nop
 800506c:	08004fa5 	.word	0x08004fa5

08005070 <__sfmoreglue>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	1e4a      	subs	r2, r1, #1
 8005074:	2568      	movs	r5, #104	; 0x68
 8005076:	4355      	muls	r5, r2
 8005078:	460e      	mov	r6, r1
 800507a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800507e:	f000 f981 	bl	8005384 <_malloc_r>
 8005082:	4604      	mov	r4, r0
 8005084:	b140      	cbz	r0, 8005098 <__sfmoreglue+0x28>
 8005086:	2100      	movs	r1, #0
 8005088:	e9c0 1600 	strd	r1, r6, [r0]
 800508c:	300c      	adds	r0, #12
 800508e:	60a0      	str	r0, [r4, #8]
 8005090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005094:	f7ff fce4 	bl	8004a60 <memset>
 8005098:	4620      	mov	r0, r4
 800509a:	bd70      	pop	{r4, r5, r6, pc}

0800509c <__sfp_lock_acquire>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <__sfp_lock_acquire+0x8>)
 800509e:	f000 b8b3 	b.w	8005208 <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	200001b4 	.word	0x200001b4

080050a8 <__sfp_lock_release>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__sfp_lock_release+0x8>)
 80050aa:	f000 b8ae 	b.w	800520a <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	200001b4 	.word	0x200001b4

080050b4 <__sinit_lock_acquire>:
 80050b4:	4801      	ldr	r0, [pc, #4]	; (80050bc <__sinit_lock_acquire+0x8>)
 80050b6:	f000 b8a7 	b.w	8005208 <__retarget_lock_acquire_recursive>
 80050ba:	bf00      	nop
 80050bc:	200001af 	.word	0x200001af

080050c0 <__sinit_lock_release>:
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <__sinit_lock_release+0x8>)
 80050c2:	f000 b8a2 	b.w	800520a <__retarget_lock_release_recursive>
 80050c6:	bf00      	nop
 80050c8:	200001af 	.word	0x200001af

080050cc <__sinit>:
 80050cc:	b510      	push	{r4, lr}
 80050ce:	4604      	mov	r4, r0
 80050d0:	f7ff fff0 	bl	80050b4 <__sinit_lock_acquire>
 80050d4:	69a3      	ldr	r3, [r4, #24]
 80050d6:	b11b      	cbz	r3, 80050e0 <__sinit+0x14>
 80050d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050dc:	f7ff bff0 	b.w	80050c0 <__sinit_lock_release>
 80050e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050e4:	6523      	str	r3, [r4, #80]	; 0x50
 80050e6:	4b13      	ldr	r3, [pc, #76]	; (8005134 <__sinit+0x68>)
 80050e8:	4a13      	ldr	r2, [pc, #76]	; (8005138 <__sinit+0x6c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ee:	42a3      	cmp	r3, r4
 80050f0:	bf04      	itt	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	61a3      	streq	r3, [r4, #24]
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f820 	bl	800513c <__sfp>
 80050fc:	6060      	str	r0, [r4, #4]
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f81c 	bl	800513c <__sfp>
 8005104:	60a0      	str	r0, [r4, #8]
 8005106:	4620      	mov	r0, r4
 8005108:	f000 f818 	bl	800513c <__sfp>
 800510c:	2200      	movs	r2, #0
 800510e:	60e0      	str	r0, [r4, #12]
 8005110:	2104      	movs	r1, #4
 8005112:	6860      	ldr	r0, [r4, #4]
 8005114:	f7ff ff82 	bl	800501c <std>
 8005118:	68a0      	ldr	r0, [r4, #8]
 800511a:	2201      	movs	r2, #1
 800511c:	2109      	movs	r1, #9
 800511e:	f7ff ff7d 	bl	800501c <std>
 8005122:	68e0      	ldr	r0, [r4, #12]
 8005124:	2202      	movs	r2, #2
 8005126:	2112      	movs	r1, #18
 8005128:	f7ff ff78 	bl	800501c <std>
 800512c:	2301      	movs	r3, #1
 800512e:	61a3      	str	r3, [r4, #24]
 8005130:	e7d2      	b.n	80050d8 <__sinit+0xc>
 8005132:	bf00      	nop
 8005134:	08005d10 	.word	0x08005d10
 8005138:	08005065 	.word	0x08005065

0800513c <__sfp>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	4607      	mov	r7, r0
 8005140:	f7ff ffac 	bl	800509c <__sfp_lock_acquire>
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <__sfp+0x84>)
 8005146:	681e      	ldr	r6, [r3, #0]
 8005148:	69b3      	ldr	r3, [r6, #24]
 800514a:	b913      	cbnz	r3, 8005152 <__sfp+0x16>
 800514c:	4630      	mov	r0, r6
 800514e:	f7ff ffbd 	bl	80050cc <__sinit>
 8005152:	3648      	adds	r6, #72	; 0x48
 8005154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005158:	3b01      	subs	r3, #1
 800515a:	d503      	bpl.n	8005164 <__sfp+0x28>
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	b30b      	cbz	r3, 80051a4 <__sfp+0x68>
 8005160:	6836      	ldr	r6, [r6, #0]
 8005162:	e7f7      	b.n	8005154 <__sfp+0x18>
 8005164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005168:	b9d5      	cbnz	r5, 80051a0 <__sfp+0x64>
 800516a:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <__sfp+0x88>)
 800516c:	60e3      	str	r3, [r4, #12]
 800516e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005172:	6665      	str	r5, [r4, #100]	; 0x64
 8005174:	f000 f847 	bl	8005206 <__retarget_lock_init_recursive>
 8005178:	f7ff ff96 	bl	80050a8 <__sfp_lock_release>
 800517c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005184:	6025      	str	r5, [r4, #0]
 8005186:	61a5      	str	r5, [r4, #24]
 8005188:	2208      	movs	r2, #8
 800518a:	4629      	mov	r1, r5
 800518c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005190:	f7ff fc66 	bl	8004a60 <memset>
 8005194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800519c:	4620      	mov	r0, r4
 800519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a0:	3468      	adds	r4, #104	; 0x68
 80051a2:	e7d9      	b.n	8005158 <__sfp+0x1c>
 80051a4:	2104      	movs	r1, #4
 80051a6:	4638      	mov	r0, r7
 80051a8:	f7ff ff62 	bl	8005070 <__sfmoreglue>
 80051ac:	4604      	mov	r4, r0
 80051ae:	6030      	str	r0, [r6, #0]
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d1d5      	bne.n	8005160 <__sfp+0x24>
 80051b4:	f7ff ff78 	bl	80050a8 <__sfp_lock_release>
 80051b8:	230c      	movs	r3, #12
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	e7ee      	b.n	800519c <__sfp+0x60>
 80051be:	bf00      	nop
 80051c0:	08005d10 	.word	0x08005d10
 80051c4:	ffff0001 	.word	0xffff0001

080051c8 <_fwalk_reent>:
 80051c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051cc:	4606      	mov	r6, r0
 80051ce:	4688      	mov	r8, r1
 80051d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051d4:	2700      	movs	r7, #0
 80051d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051da:	f1b9 0901 	subs.w	r9, r9, #1
 80051de:	d505      	bpl.n	80051ec <_fwalk_reent+0x24>
 80051e0:	6824      	ldr	r4, [r4, #0]
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	d1f7      	bne.n	80051d6 <_fwalk_reent+0xe>
 80051e6:	4638      	mov	r0, r7
 80051e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ec:	89ab      	ldrh	r3, [r5, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d907      	bls.n	8005202 <_fwalk_reent+0x3a>
 80051f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051f6:	3301      	adds	r3, #1
 80051f8:	d003      	beq.n	8005202 <_fwalk_reent+0x3a>
 80051fa:	4629      	mov	r1, r5
 80051fc:	4630      	mov	r0, r6
 80051fe:	47c0      	blx	r8
 8005200:	4307      	orrs	r7, r0
 8005202:	3568      	adds	r5, #104	; 0x68
 8005204:	e7e9      	b.n	80051da <_fwalk_reent+0x12>

08005206 <__retarget_lock_init_recursive>:
 8005206:	4770      	bx	lr

08005208 <__retarget_lock_acquire_recursive>:
 8005208:	4770      	bx	lr

0800520a <__retarget_lock_release_recursive>:
 800520a:	4770      	bx	lr

0800520c <__swhatbuf_r>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	460e      	mov	r6, r1
 8005210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005214:	2900      	cmp	r1, #0
 8005216:	b096      	sub	sp, #88	; 0x58
 8005218:	4614      	mov	r4, r2
 800521a:	461d      	mov	r5, r3
 800521c:	da07      	bge.n	800522e <__swhatbuf_r+0x22>
 800521e:	2300      	movs	r3, #0
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	89b3      	ldrh	r3, [r6, #12]
 8005224:	061a      	lsls	r2, r3, #24
 8005226:	d410      	bmi.n	800524a <__swhatbuf_r+0x3e>
 8005228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522c:	e00e      	b.n	800524c <__swhatbuf_r+0x40>
 800522e:	466a      	mov	r2, sp
 8005230:	f000 fc66 	bl	8005b00 <_fstat_r>
 8005234:	2800      	cmp	r0, #0
 8005236:	dbf2      	blt.n	800521e <__swhatbuf_r+0x12>
 8005238:	9a01      	ldr	r2, [sp, #4]
 800523a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800523e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005242:	425a      	negs	r2, r3
 8005244:	415a      	adcs	r2, r3
 8005246:	602a      	str	r2, [r5, #0]
 8005248:	e7ee      	b.n	8005228 <__swhatbuf_r+0x1c>
 800524a:	2340      	movs	r3, #64	; 0x40
 800524c:	2000      	movs	r0, #0
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	b016      	add	sp, #88	; 0x58
 8005252:	bd70      	pop	{r4, r5, r6, pc}

08005254 <__smakebuf_r>:
 8005254:	898b      	ldrh	r3, [r1, #12]
 8005256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005258:	079d      	lsls	r5, r3, #30
 800525a:	4606      	mov	r6, r0
 800525c:	460c      	mov	r4, r1
 800525e:	d507      	bpl.n	8005270 <__smakebuf_r+0x1c>
 8005260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	6123      	str	r3, [r4, #16]
 8005268:	2301      	movs	r3, #1
 800526a:	6163      	str	r3, [r4, #20]
 800526c:	b002      	add	sp, #8
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	ab01      	add	r3, sp, #4
 8005272:	466a      	mov	r2, sp
 8005274:	f7ff ffca 	bl	800520c <__swhatbuf_r>
 8005278:	9900      	ldr	r1, [sp, #0]
 800527a:	4605      	mov	r5, r0
 800527c:	4630      	mov	r0, r6
 800527e:	f000 f881 	bl	8005384 <_malloc_r>
 8005282:	b948      	cbnz	r0, 8005298 <__smakebuf_r+0x44>
 8005284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005288:	059a      	lsls	r2, r3, #22
 800528a:	d4ef      	bmi.n	800526c <__smakebuf_r+0x18>
 800528c:	f023 0303 	bic.w	r3, r3, #3
 8005290:	f043 0302 	orr.w	r3, r3, #2
 8005294:	81a3      	strh	r3, [r4, #12]
 8005296:	e7e3      	b.n	8005260 <__smakebuf_r+0xc>
 8005298:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <__smakebuf_r+0x7c>)
 800529a:	62b3      	str	r3, [r6, #40]	; 0x28
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	6020      	str	r0, [r4, #0]
 80052a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a4:	81a3      	strh	r3, [r4, #12]
 80052a6:	9b00      	ldr	r3, [sp, #0]
 80052a8:	6163      	str	r3, [r4, #20]
 80052aa:	9b01      	ldr	r3, [sp, #4]
 80052ac:	6120      	str	r0, [r4, #16]
 80052ae:	b15b      	cbz	r3, 80052c8 <__smakebuf_r+0x74>
 80052b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b4:	4630      	mov	r0, r6
 80052b6:	f000 fc35 	bl	8005b24 <_isatty_r>
 80052ba:	b128      	cbz	r0, 80052c8 <__smakebuf_r+0x74>
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	81a3      	strh	r3, [r4, #12]
 80052c8:	89a0      	ldrh	r0, [r4, #12]
 80052ca:	4305      	orrs	r5, r0
 80052cc:	81a5      	strh	r5, [r4, #12]
 80052ce:	e7cd      	b.n	800526c <__smakebuf_r+0x18>
 80052d0:	08005065 	.word	0x08005065

080052d4 <malloc>:
 80052d4:	4b02      	ldr	r3, [pc, #8]	; (80052e0 <malloc+0xc>)
 80052d6:	4601      	mov	r1, r0
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f000 b853 	b.w	8005384 <_malloc_r>
 80052de:	bf00      	nop
 80052e0:	2000000c 	.word	0x2000000c

080052e4 <_free_r>:
 80052e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e6:	2900      	cmp	r1, #0
 80052e8:	d048      	beq.n	800537c <_free_r+0x98>
 80052ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ee:	9001      	str	r0, [sp, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f1a1 0404 	sub.w	r4, r1, #4
 80052f6:	bfb8      	it	lt
 80052f8:	18e4      	addlt	r4, r4, r3
 80052fa:	f000 fc35 	bl	8005b68 <__malloc_lock>
 80052fe:	4a20      	ldr	r2, [pc, #128]	; (8005380 <_free_r+0x9c>)
 8005300:	9801      	ldr	r0, [sp, #4]
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	4615      	mov	r5, r2
 8005306:	b933      	cbnz	r3, 8005316 <_free_r+0x32>
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6014      	str	r4, [r2, #0]
 800530c:	b003      	add	sp, #12
 800530e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005312:	f000 bc2f 	b.w	8005b74 <__malloc_unlock>
 8005316:	42a3      	cmp	r3, r4
 8005318:	d90b      	bls.n	8005332 <_free_r+0x4e>
 800531a:	6821      	ldr	r1, [r4, #0]
 800531c:	1862      	adds	r2, r4, r1
 800531e:	4293      	cmp	r3, r2
 8005320:	bf04      	itt	eq
 8005322:	681a      	ldreq	r2, [r3, #0]
 8005324:	685b      	ldreq	r3, [r3, #4]
 8005326:	6063      	str	r3, [r4, #4]
 8005328:	bf04      	itt	eq
 800532a:	1852      	addeq	r2, r2, r1
 800532c:	6022      	streq	r2, [r4, #0]
 800532e:	602c      	str	r4, [r5, #0]
 8005330:	e7ec      	b.n	800530c <_free_r+0x28>
 8005332:	461a      	mov	r2, r3
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b10b      	cbz	r3, 800533c <_free_r+0x58>
 8005338:	42a3      	cmp	r3, r4
 800533a:	d9fa      	bls.n	8005332 <_free_r+0x4e>
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	1855      	adds	r5, r2, r1
 8005340:	42a5      	cmp	r5, r4
 8005342:	d10b      	bne.n	800535c <_free_r+0x78>
 8005344:	6824      	ldr	r4, [r4, #0]
 8005346:	4421      	add	r1, r4
 8005348:	1854      	adds	r4, r2, r1
 800534a:	42a3      	cmp	r3, r4
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	d1dd      	bne.n	800530c <_free_r+0x28>
 8005350:	681c      	ldr	r4, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	6053      	str	r3, [r2, #4]
 8005356:	4421      	add	r1, r4
 8005358:	6011      	str	r1, [r2, #0]
 800535a:	e7d7      	b.n	800530c <_free_r+0x28>
 800535c:	d902      	bls.n	8005364 <_free_r+0x80>
 800535e:	230c      	movs	r3, #12
 8005360:	6003      	str	r3, [r0, #0]
 8005362:	e7d3      	b.n	800530c <_free_r+0x28>
 8005364:	6825      	ldr	r5, [r4, #0]
 8005366:	1961      	adds	r1, r4, r5
 8005368:	428b      	cmp	r3, r1
 800536a:	bf04      	itt	eq
 800536c:	6819      	ldreq	r1, [r3, #0]
 800536e:	685b      	ldreq	r3, [r3, #4]
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	bf04      	itt	eq
 8005374:	1949      	addeq	r1, r1, r5
 8005376:	6021      	streq	r1, [r4, #0]
 8005378:	6054      	str	r4, [r2, #4]
 800537a:	e7c7      	b.n	800530c <_free_r+0x28>
 800537c:	b003      	add	sp, #12
 800537e:	bd30      	pop	{r4, r5, pc}
 8005380:	20000094 	.word	0x20000094

08005384 <_malloc_r>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	1ccd      	adds	r5, r1, #3
 8005388:	f025 0503 	bic.w	r5, r5, #3
 800538c:	3508      	adds	r5, #8
 800538e:	2d0c      	cmp	r5, #12
 8005390:	bf38      	it	cc
 8005392:	250c      	movcc	r5, #12
 8005394:	2d00      	cmp	r5, #0
 8005396:	4606      	mov	r6, r0
 8005398:	db01      	blt.n	800539e <_malloc_r+0x1a>
 800539a:	42a9      	cmp	r1, r5
 800539c:	d903      	bls.n	80053a6 <_malloc_r+0x22>
 800539e:	230c      	movs	r3, #12
 80053a0:	6033      	str	r3, [r6, #0]
 80053a2:	2000      	movs	r0, #0
 80053a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a6:	f000 fbdf 	bl	8005b68 <__malloc_lock>
 80053aa:	4921      	ldr	r1, [pc, #132]	; (8005430 <_malloc_r+0xac>)
 80053ac:	680a      	ldr	r2, [r1, #0]
 80053ae:	4614      	mov	r4, r2
 80053b0:	b99c      	cbnz	r4, 80053da <_malloc_r+0x56>
 80053b2:	4f20      	ldr	r7, [pc, #128]	; (8005434 <_malloc_r+0xb0>)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	b923      	cbnz	r3, 80053c2 <_malloc_r+0x3e>
 80053b8:	4621      	mov	r1, r4
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 fb2a 	bl	8005a14 <_sbrk_r>
 80053c0:	6038      	str	r0, [r7, #0]
 80053c2:	4629      	mov	r1, r5
 80053c4:	4630      	mov	r0, r6
 80053c6:	f000 fb25 	bl	8005a14 <_sbrk_r>
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	d123      	bne.n	8005416 <_malloc_r+0x92>
 80053ce:	230c      	movs	r3, #12
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	4630      	mov	r0, r6
 80053d4:	f000 fbce 	bl	8005b74 <__malloc_unlock>
 80053d8:	e7e3      	b.n	80053a2 <_malloc_r+0x1e>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	1b5b      	subs	r3, r3, r5
 80053de:	d417      	bmi.n	8005410 <_malloc_r+0x8c>
 80053e0:	2b0b      	cmp	r3, #11
 80053e2:	d903      	bls.n	80053ec <_malloc_r+0x68>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	441c      	add	r4, r3
 80053e8:	6025      	str	r5, [r4, #0]
 80053ea:	e004      	b.n	80053f6 <_malloc_r+0x72>
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	42a2      	cmp	r2, r4
 80053f0:	bf0c      	ite	eq
 80053f2:	600b      	streq	r3, [r1, #0]
 80053f4:	6053      	strne	r3, [r2, #4]
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 fbbc 	bl	8005b74 <__malloc_unlock>
 80053fc:	f104 000b 	add.w	r0, r4, #11
 8005400:	1d23      	adds	r3, r4, #4
 8005402:	f020 0007 	bic.w	r0, r0, #7
 8005406:	1ac2      	subs	r2, r0, r3
 8005408:	d0cc      	beq.n	80053a4 <_malloc_r+0x20>
 800540a:	1a1b      	subs	r3, r3, r0
 800540c:	50a3      	str	r3, [r4, r2]
 800540e:	e7c9      	b.n	80053a4 <_malloc_r+0x20>
 8005410:	4622      	mov	r2, r4
 8005412:	6864      	ldr	r4, [r4, #4]
 8005414:	e7cc      	b.n	80053b0 <_malloc_r+0x2c>
 8005416:	1cc4      	adds	r4, r0, #3
 8005418:	f024 0403 	bic.w	r4, r4, #3
 800541c:	42a0      	cmp	r0, r4
 800541e:	d0e3      	beq.n	80053e8 <_malloc_r+0x64>
 8005420:	1a21      	subs	r1, r4, r0
 8005422:	4630      	mov	r0, r6
 8005424:	f000 faf6 	bl	8005a14 <_sbrk_r>
 8005428:	3001      	adds	r0, #1
 800542a:	d1dd      	bne.n	80053e8 <_malloc_r+0x64>
 800542c:	e7cf      	b.n	80053ce <_malloc_r+0x4a>
 800542e:	bf00      	nop
 8005430:	20000094 	.word	0x20000094
 8005434:	20000098 	.word	0x20000098

08005438 <__sfputc_r>:
 8005438:	6893      	ldr	r3, [r2, #8]
 800543a:	3b01      	subs	r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	b410      	push	{r4}
 8005440:	6093      	str	r3, [r2, #8]
 8005442:	da08      	bge.n	8005456 <__sfputc_r+0x1e>
 8005444:	6994      	ldr	r4, [r2, #24]
 8005446:	42a3      	cmp	r3, r4
 8005448:	db01      	blt.n	800544e <__sfputc_r+0x16>
 800544a:	290a      	cmp	r1, #10
 800544c:	d103      	bne.n	8005456 <__sfputc_r+0x1e>
 800544e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005452:	f7ff bc61 	b.w	8004d18 <__swbuf_r>
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	1c58      	adds	r0, r3, #1
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	7019      	strb	r1, [r3, #0]
 800545e:	4608      	mov	r0, r1
 8005460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005464:	4770      	bx	lr

08005466 <__sfputs_r>:
 8005466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005468:	4606      	mov	r6, r0
 800546a:	460f      	mov	r7, r1
 800546c:	4614      	mov	r4, r2
 800546e:	18d5      	adds	r5, r2, r3
 8005470:	42ac      	cmp	r4, r5
 8005472:	d101      	bne.n	8005478 <__sfputs_r+0x12>
 8005474:	2000      	movs	r0, #0
 8005476:	e007      	b.n	8005488 <__sfputs_r+0x22>
 8005478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547c:	463a      	mov	r2, r7
 800547e:	4630      	mov	r0, r6
 8005480:	f7ff ffda 	bl	8005438 <__sfputc_r>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d1f3      	bne.n	8005470 <__sfputs_r+0xa>
 8005488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800548c <_vfiprintf_r>:
 800548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	460d      	mov	r5, r1
 8005492:	b09d      	sub	sp, #116	; 0x74
 8005494:	4614      	mov	r4, r2
 8005496:	4698      	mov	r8, r3
 8005498:	4606      	mov	r6, r0
 800549a:	b118      	cbz	r0, 80054a4 <_vfiprintf_r+0x18>
 800549c:	6983      	ldr	r3, [r0, #24]
 800549e:	b90b      	cbnz	r3, 80054a4 <_vfiprintf_r+0x18>
 80054a0:	f7ff fe14 	bl	80050cc <__sinit>
 80054a4:	4b89      	ldr	r3, [pc, #548]	; (80056cc <_vfiprintf_r+0x240>)
 80054a6:	429d      	cmp	r5, r3
 80054a8:	d11b      	bne.n	80054e2 <_vfiprintf_r+0x56>
 80054aa:	6875      	ldr	r5, [r6, #4]
 80054ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ae:	07d9      	lsls	r1, r3, #31
 80054b0:	d405      	bmi.n	80054be <_vfiprintf_r+0x32>
 80054b2:	89ab      	ldrh	r3, [r5, #12]
 80054b4:	059a      	lsls	r2, r3, #22
 80054b6:	d402      	bmi.n	80054be <_vfiprintf_r+0x32>
 80054b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ba:	f7ff fea5 	bl	8005208 <__retarget_lock_acquire_recursive>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	d501      	bpl.n	80054c8 <_vfiprintf_r+0x3c>
 80054c4:	692b      	ldr	r3, [r5, #16]
 80054c6:	b9eb      	cbnz	r3, 8005504 <_vfiprintf_r+0x78>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7ff fc76 	bl	8004dbc <__swsetup_r>
 80054d0:	b1c0      	cbz	r0, 8005504 <_vfiprintf_r+0x78>
 80054d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d4:	07dc      	lsls	r4, r3, #31
 80054d6:	d50e      	bpl.n	80054f6 <_vfiprintf_r+0x6a>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b01d      	add	sp, #116	; 0x74
 80054de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e2:	4b7b      	ldr	r3, [pc, #492]	; (80056d0 <_vfiprintf_r+0x244>)
 80054e4:	429d      	cmp	r5, r3
 80054e6:	d101      	bne.n	80054ec <_vfiprintf_r+0x60>
 80054e8:	68b5      	ldr	r5, [r6, #8]
 80054ea:	e7df      	b.n	80054ac <_vfiprintf_r+0x20>
 80054ec:	4b79      	ldr	r3, [pc, #484]	; (80056d4 <_vfiprintf_r+0x248>)
 80054ee:	429d      	cmp	r5, r3
 80054f0:	bf08      	it	eq
 80054f2:	68f5      	ldreq	r5, [r6, #12]
 80054f4:	e7da      	b.n	80054ac <_vfiprintf_r+0x20>
 80054f6:	89ab      	ldrh	r3, [r5, #12]
 80054f8:	0598      	lsls	r0, r3, #22
 80054fa:	d4ed      	bmi.n	80054d8 <_vfiprintf_r+0x4c>
 80054fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054fe:	f7ff fe84 	bl	800520a <__retarget_lock_release_recursive>
 8005502:	e7e9      	b.n	80054d8 <_vfiprintf_r+0x4c>
 8005504:	2300      	movs	r3, #0
 8005506:	9309      	str	r3, [sp, #36]	; 0x24
 8005508:	2320      	movs	r3, #32
 800550a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800550e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005512:	2330      	movs	r3, #48	; 0x30
 8005514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056d8 <_vfiprintf_r+0x24c>
 8005518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800551c:	f04f 0901 	mov.w	r9, #1
 8005520:	4623      	mov	r3, r4
 8005522:	469a      	mov	sl, r3
 8005524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005528:	b10a      	cbz	r2, 800552e <_vfiprintf_r+0xa2>
 800552a:	2a25      	cmp	r2, #37	; 0x25
 800552c:	d1f9      	bne.n	8005522 <_vfiprintf_r+0x96>
 800552e:	ebba 0b04 	subs.w	fp, sl, r4
 8005532:	d00b      	beq.n	800554c <_vfiprintf_r+0xc0>
 8005534:	465b      	mov	r3, fp
 8005536:	4622      	mov	r2, r4
 8005538:	4629      	mov	r1, r5
 800553a:	4630      	mov	r0, r6
 800553c:	f7ff ff93 	bl	8005466 <__sfputs_r>
 8005540:	3001      	adds	r0, #1
 8005542:	f000 80aa 	beq.w	800569a <_vfiprintf_r+0x20e>
 8005546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005548:	445a      	add	r2, fp
 800554a:	9209      	str	r2, [sp, #36]	; 0x24
 800554c:	f89a 3000 	ldrb.w	r3, [sl]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80a2 	beq.w	800569a <_vfiprintf_r+0x20e>
 8005556:	2300      	movs	r3, #0
 8005558:	f04f 32ff 	mov.w	r2, #4294967295
 800555c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005560:	f10a 0a01 	add.w	sl, sl, #1
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	9307      	str	r3, [sp, #28]
 8005568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800556c:	931a      	str	r3, [sp, #104]	; 0x68
 800556e:	4654      	mov	r4, sl
 8005570:	2205      	movs	r2, #5
 8005572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005576:	4858      	ldr	r0, [pc, #352]	; (80056d8 <_vfiprintf_r+0x24c>)
 8005578:	f7fa fe2a 	bl	80001d0 <memchr>
 800557c:	9a04      	ldr	r2, [sp, #16]
 800557e:	b9d8      	cbnz	r0, 80055b8 <_vfiprintf_r+0x12c>
 8005580:	06d1      	lsls	r1, r2, #27
 8005582:	bf44      	itt	mi
 8005584:	2320      	movmi	r3, #32
 8005586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558a:	0713      	lsls	r3, r2, #28
 800558c:	bf44      	itt	mi
 800558e:	232b      	movmi	r3, #43	; 0x2b
 8005590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005594:	f89a 3000 	ldrb.w	r3, [sl]
 8005598:	2b2a      	cmp	r3, #42	; 0x2a
 800559a:	d015      	beq.n	80055c8 <_vfiprintf_r+0x13c>
 800559c:	9a07      	ldr	r2, [sp, #28]
 800559e:	4654      	mov	r4, sl
 80055a0:	2000      	movs	r0, #0
 80055a2:	f04f 0c0a 	mov.w	ip, #10
 80055a6:	4621      	mov	r1, r4
 80055a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ac:	3b30      	subs	r3, #48	; 0x30
 80055ae:	2b09      	cmp	r3, #9
 80055b0:	d94e      	bls.n	8005650 <_vfiprintf_r+0x1c4>
 80055b2:	b1b0      	cbz	r0, 80055e2 <_vfiprintf_r+0x156>
 80055b4:	9207      	str	r2, [sp, #28]
 80055b6:	e014      	b.n	80055e2 <_vfiprintf_r+0x156>
 80055b8:	eba0 0308 	sub.w	r3, r0, r8
 80055bc:	fa09 f303 	lsl.w	r3, r9, r3
 80055c0:	4313      	orrs	r3, r2
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	46a2      	mov	sl, r4
 80055c6:	e7d2      	b.n	800556e <_vfiprintf_r+0xe2>
 80055c8:	9b03      	ldr	r3, [sp, #12]
 80055ca:	1d19      	adds	r1, r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	9103      	str	r1, [sp, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bfbb      	ittet	lt
 80055d4:	425b      	neglt	r3, r3
 80055d6:	f042 0202 	orrlt.w	r2, r2, #2
 80055da:	9307      	strge	r3, [sp, #28]
 80055dc:	9307      	strlt	r3, [sp, #28]
 80055de:	bfb8      	it	lt
 80055e0:	9204      	strlt	r2, [sp, #16]
 80055e2:	7823      	ldrb	r3, [r4, #0]
 80055e4:	2b2e      	cmp	r3, #46	; 0x2e
 80055e6:	d10c      	bne.n	8005602 <_vfiprintf_r+0x176>
 80055e8:	7863      	ldrb	r3, [r4, #1]
 80055ea:	2b2a      	cmp	r3, #42	; 0x2a
 80055ec:	d135      	bne.n	800565a <_vfiprintf_r+0x1ce>
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	1d1a      	adds	r2, r3, #4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	9203      	str	r2, [sp, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bfb8      	it	lt
 80055fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80055fe:	3402      	adds	r4, #2
 8005600:	9305      	str	r3, [sp, #20]
 8005602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056e8 <_vfiprintf_r+0x25c>
 8005606:	7821      	ldrb	r1, [r4, #0]
 8005608:	2203      	movs	r2, #3
 800560a:	4650      	mov	r0, sl
 800560c:	f7fa fde0 	bl	80001d0 <memchr>
 8005610:	b140      	cbz	r0, 8005624 <_vfiprintf_r+0x198>
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	eba0 000a 	sub.w	r0, r0, sl
 8005618:	fa03 f000 	lsl.w	r0, r3, r0
 800561c:	9b04      	ldr	r3, [sp, #16]
 800561e:	4303      	orrs	r3, r0
 8005620:	3401      	adds	r4, #1
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005628:	482c      	ldr	r0, [pc, #176]	; (80056dc <_vfiprintf_r+0x250>)
 800562a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800562e:	2206      	movs	r2, #6
 8005630:	f7fa fdce 	bl	80001d0 <memchr>
 8005634:	2800      	cmp	r0, #0
 8005636:	d03f      	beq.n	80056b8 <_vfiprintf_r+0x22c>
 8005638:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <_vfiprintf_r+0x254>)
 800563a:	bb1b      	cbnz	r3, 8005684 <_vfiprintf_r+0x1f8>
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	3307      	adds	r3, #7
 8005640:	f023 0307 	bic.w	r3, r3, #7
 8005644:	3308      	adds	r3, #8
 8005646:	9303      	str	r3, [sp, #12]
 8005648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564a:	443b      	add	r3, r7
 800564c:	9309      	str	r3, [sp, #36]	; 0x24
 800564e:	e767      	b.n	8005520 <_vfiprintf_r+0x94>
 8005650:	fb0c 3202 	mla	r2, ip, r2, r3
 8005654:	460c      	mov	r4, r1
 8005656:	2001      	movs	r0, #1
 8005658:	e7a5      	b.n	80055a6 <_vfiprintf_r+0x11a>
 800565a:	2300      	movs	r3, #0
 800565c:	3401      	adds	r4, #1
 800565e:	9305      	str	r3, [sp, #20]
 8005660:	4619      	mov	r1, r3
 8005662:	f04f 0c0a 	mov.w	ip, #10
 8005666:	4620      	mov	r0, r4
 8005668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800566c:	3a30      	subs	r2, #48	; 0x30
 800566e:	2a09      	cmp	r2, #9
 8005670:	d903      	bls.n	800567a <_vfiprintf_r+0x1ee>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0c5      	beq.n	8005602 <_vfiprintf_r+0x176>
 8005676:	9105      	str	r1, [sp, #20]
 8005678:	e7c3      	b.n	8005602 <_vfiprintf_r+0x176>
 800567a:	fb0c 2101 	mla	r1, ip, r1, r2
 800567e:	4604      	mov	r4, r0
 8005680:	2301      	movs	r3, #1
 8005682:	e7f0      	b.n	8005666 <_vfiprintf_r+0x1da>
 8005684:	ab03      	add	r3, sp, #12
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	462a      	mov	r2, r5
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <_vfiprintf_r+0x258>)
 800568c:	a904      	add	r1, sp, #16
 800568e:	4630      	mov	r0, r6
 8005690:	f3af 8000 	nop.w
 8005694:	4607      	mov	r7, r0
 8005696:	1c78      	adds	r0, r7, #1
 8005698:	d1d6      	bne.n	8005648 <_vfiprintf_r+0x1bc>
 800569a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800569c:	07d9      	lsls	r1, r3, #31
 800569e:	d405      	bmi.n	80056ac <_vfiprintf_r+0x220>
 80056a0:	89ab      	ldrh	r3, [r5, #12]
 80056a2:	059a      	lsls	r2, r3, #22
 80056a4:	d402      	bmi.n	80056ac <_vfiprintf_r+0x220>
 80056a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a8:	f7ff fdaf 	bl	800520a <__retarget_lock_release_recursive>
 80056ac:	89ab      	ldrh	r3, [r5, #12]
 80056ae:	065b      	lsls	r3, r3, #25
 80056b0:	f53f af12 	bmi.w	80054d8 <_vfiprintf_r+0x4c>
 80056b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056b6:	e711      	b.n	80054dc <_vfiprintf_r+0x50>
 80056b8:	ab03      	add	r3, sp, #12
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	462a      	mov	r2, r5
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <_vfiprintf_r+0x258>)
 80056c0:	a904      	add	r1, sp, #16
 80056c2:	4630      	mov	r0, r6
 80056c4:	f000 f880 	bl	80057c8 <_printf_i>
 80056c8:	e7e4      	b.n	8005694 <_vfiprintf_r+0x208>
 80056ca:	bf00      	nop
 80056cc:	08005d34 	.word	0x08005d34
 80056d0:	08005d54 	.word	0x08005d54
 80056d4:	08005d14 	.word	0x08005d14
 80056d8:	08005d74 	.word	0x08005d74
 80056dc:	08005d7e 	.word	0x08005d7e
 80056e0:	00000000 	.word	0x00000000
 80056e4:	08005467 	.word	0x08005467
 80056e8:	08005d7a 	.word	0x08005d7a

080056ec <_printf_common>:
 80056ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	4616      	mov	r6, r2
 80056f2:	4699      	mov	r9, r3
 80056f4:	688a      	ldr	r2, [r1, #8]
 80056f6:	690b      	ldr	r3, [r1, #16]
 80056f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bfb8      	it	lt
 8005700:	4613      	movlt	r3, r2
 8005702:	6033      	str	r3, [r6, #0]
 8005704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005708:	4607      	mov	r7, r0
 800570a:	460c      	mov	r4, r1
 800570c:	b10a      	cbz	r2, 8005712 <_printf_common+0x26>
 800570e:	3301      	adds	r3, #1
 8005710:	6033      	str	r3, [r6, #0]
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	0699      	lsls	r1, r3, #26
 8005716:	bf42      	ittt	mi
 8005718:	6833      	ldrmi	r3, [r6, #0]
 800571a:	3302      	addmi	r3, #2
 800571c:	6033      	strmi	r3, [r6, #0]
 800571e:	6825      	ldr	r5, [r4, #0]
 8005720:	f015 0506 	ands.w	r5, r5, #6
 8005724:	d106      	bne.n	8005734 <_printf_common+0x48>
 8005726:	f104 0a19 	add.w	sl, r4, #25
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	6832      	ldr	r2, [r6, #0]
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	42ab      	cmp	r3, r5
 8005732:	dc26      	bgt.n	8005782 <_printf_common+0x96>
 8005734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005738:	1e13      	subs	r3, r2, #0
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	bf18      	it	ne
 800573e:	2301      	movne	r3, #1
 8005740:	0692      	lsls	r2, r2, #26
 8005742:	d42b      	bmi.n	800579c <_printf_common+0xb0>
 8005744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005748:	4649      	mov	r1, r9
 800574a:	4638      	mov	r0, r7
 800574c:	47c0      	blx	r8
 800574e:	3001      	adds	r0, #1
 8005750:	d01e      	beq.n	8005790 <_printf_common+0xa4>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	68e5      	ldr	r5, [r4, #12]
 8005756:	6832      	ldr	r2, [r6, #0]
 8005758:	f003 0306 	and.w	r3, r3, #6
 800575c:	2b04      	cmp	r3, #4
 800575e:	bf08      	it	eq
 8005760:	1aad      	subeq	r5, r5, r2
 8005762:	68a3      	ldr	r3, [r4, #8]
 8005764:	6922      	ldr	r2, [r4, #16]
 8005766:	bf0c      	ite	eq
 8005768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800576c:	2500      	movne	r5, #0
 800576e:	4293      	cmp	r3, r2
 8005770:	bfc4      	itt	gt
 8005772:	1a9b      	subgt	r3, r3, r2
 8005774:	18ed      	addgt	r5, r5, r3
 8005776:	2600      	movs	r6, #0
 8005778:	341a      	adds	r4, #26
 800577a:	42b5      	cmp	r5, r6
 800577c:	d11a      	bne.n	80057b4 <_printf_common+0xc8>
 800577e:	2000      	movs	r0, #0
 8005780:	e008      	b.n	8005794 <_printf_common+0xa8>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4649      	mov	r1, r9
 8005788:	4638      	mov	r0, r7
 800578a:	47c0      	blx	r8
 800578c:	3001      	adds	r0, #1
 800578e:	d103      	bne.n	8005798 <_printf_common+0xac>
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	3501      	adds	r5, #1
 800579a:	e7c6      	b.n	800572a <_printf_common+0x3e>
 800579c:	18e1      	adds	r1, r4, r3
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	2030      	movs	r0, #48	; 0x30
 80057a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057a6:	4422      	add	r2, r4
 80057a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057b0:	3302      	adds	r3, #2
 80057b2:	e7c7      	b.n	8005744 <_printf_common+0x58>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4622      	mov	r2, r4
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d0e6      	beq.n	8005790 <_printf_common+0xa4>
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7d9      	b.n	800577a <_printf_common+0x8e>
	...

080057c8 <_printf_i>:
 80057c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	460c      	mov	r4, r1
 80057ce:	4691      	mov	r9, r2
 80057d0:	7e27      	ldrb	r7, [r4, #24]
 80057d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057d4:	2f78      	cmp	r7, #120	; 0x78
 80057d6:	4680      	mov	r8, r0
 80057d8:	469a      	mov	sl, r3
 80057da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057de:	d807      	bhi.n	80057f0 <_printf_i+0x28>
 80057e0:	2f62      	cmp	r7, #98	; 0x62
 80057e2:	d80a      	bhi.n	80057fa <_printf_i+0x32>
 80057e4:	2f00      	cmp	r7, #0
 80057e6:	f000 80d8 	beq.w	800599a <_printf_i+0x1d2>
 80057ea:	2f58      	cmp	r7, #88	; 0x58
 80057ec:	f000 80a3 	beq.w	8005936 <_printf_i+0x16e>
 80057f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057f8:	e03a      	b.n	8005870 <_printf_i+0xa8>
 80057fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057fe:	2b15      	cmp	r3, #21
 8005800:	d8f6      	bhi.n	80057f0 <_printf_i+0x28>
 8005802:	a001      	add	r0, pc, #4	; (adr r0, 8005808 <_printf_i+0x40>)
 8005804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005808:	08005861 	.word	0x08005861
 800580c:	08005875 	.word	0x08005875
 8005810:	080057f1 	.word	0x080057f1
 8005814:	080057f1 	.word	0x080057f1
 8005818:	080057f1 	.word	0x080057f1
 800581c:	080057f1 	.word	0x080057f1
 8005820:	08005875 	.word	0x08005875
 8005824:	080057f1 	.word	0x080057f1
 8005828:	080057f1 	.word	0x080057f1
 800582c:	080057f1 	.word	0x080057f1
 8005830:	080057f1 	.word	0x080057f1
 8005834:	08005981 	.word	0x08005981
 8005838:	080058a5 	.word	0x080058a5
 800583c:	08005963 	.word	0x08005963
 8005840:	080057f1 	.word	0x080057f1
 8005844:	080057f1 	.word	0x080057f1
 8005848:	080059a3 	.word	0x080059a3
 800584c:	080057f1 	.word	0x080057f1
 8005850:	080058a5 	.word	0x080058a5
 8005854:	080057f1 	.word	0x080057f1
 8005858:	080057f1 	.word	0x080057f1
 800585c:	0800596b 	.word	0x0800596b
 8005860:	680b      	ldr	r3, [r1, #0]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	600a      	str	r2, [r1, #0]
 8005868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800586c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005870:	2301      	movs	r3, #1
 8005872:	e0a3      	b.n	80059bc <_printf_i+0x1f4>
 8005874:	6825      	ldr	r5, [r4, #0]
 8005876:	6808      	ldr	r0, [r1, #0]
 8005878:	062e      	lsls	r6, r5, #24
 800587a:	f100 0304 	add.w	r3, r0, #4
 800587e:	d50a      	bpl.n	8005896 <_printf_i+0xce>
 8005880:	6805      	ldr	r5, [r0, #0]
 8005882:	600b      	str	r3, [r1, #0]
 8005884:	2d00      	cmp	r5, #0
 8005886:	da03      	bge.n	8005890 <_printf_i+0xc8>
 8005888:	232d      	movs	r3, #45	; 0x2d
 800588a:	426d      	negs	r5, r5
 800588c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005890:	485e      	ldr	r0, [pc, #376]	; (8005a0c <_printf_i+0x244>)
 8005892:	230a      	movs	r3, #10
 8005894:	e019      	b.n	80058ca <_printf_i+0x102>
 8005896:	f015 0f40 	tst.w	r5, #64	; 0x40
 800589a:	6805      	ldr	r5, [r0, #0]
 800589c:	600b      	str	r3, [r1, #0]
 800589e:	bf18      	it	ne
 80058a0:	b22d      	sxthne	r5, r5
 80058a2:	e7ef      	b.n	8005884 <_printf_i+0xbc>
 80058a4:	680b      	ldr	r3, [r1, #0]
 80058a6:	6825      	ldr	r5, [r4, #0]
 80058a8:	1d18      	adds	r0, r3, #4
 80058aa:	6008      	str	r0, [r1, #0]
 80058ac:	0628      	lsls	r0, r5, #24
 80058ae:	d501      	bpl.n	80058b4 <_printf_i+0xec>
 80058b0:	681d      	ldr	r5, [r3, #0]
 80058b2:	e002      	b.n	80058ba <_printf_i+0xf2>
 80058b4:	0669      	lsls	r1, r5, #25
 80058b6:	d5fb      	bpl.n	80058b0 <_printf_i+0xe8>
 80058b8:	881d      	ldrh	r5, [r3, #0]
 80058ba:	4854      	ldr	r0, [pc, #336]	; (8005a0c <_printf_i+0x244>)
 80058bc:	2f6f      	cmp	r7, #111	; 0x6f
 80058be:	bf0c      	ite	eq
 80058c0:	2308      	moveq	r3, #8
 80058c2:	230a      	movne	r3, #10
 80058c4:	2100      	movs	r1, #0
 80058c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ca:	6866      	ldr	r6, [r4, #4]
 80058cc:	60a6      	str	r6, [r4, #8]
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	bfa2      	ittt	ge
 80058d2:	6821      	ldrge	r1, [r4, #0]
 80058d4:	f021 0104 	bicge.w	r1, r1, #4
 80058d8:	6021      	strge	r1, [r4, #0]
 80058da:	b90d      	cbnz	r5, 80058e0 <_printf_i+0x118>
 80058dc:	2e00      	cmp	r6, #0
 80058de:	d04d      	beq.n	800597c <_printf_i+0x1b4>
 80058e0:	4616      	mov	r6, r2
 80058e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80058e6:	fb03 5711 	mls	r7, r3, r1, r5
 80058ea:	5dc7      	ldrb	r7, [r0, r7]
 80058ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058f0:	462f      	mov	r7, r5
 80058f2:	42bb      	cmp	r3, r7
 80058f4:	460d      	mov	r5, r1
 80058f6:	d9f4      	bls.n	80058e2 <_printf_i+0x11a>
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d10b      	bne.n	8005914 <_printf_i+0x14c>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	07df      	lsls	r7, r3, #31
 8005900:	d508      	bpl.n	8005914 <_printf_i+0x14c>
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	6861      	ldr	r1, [r4, #4]
 8005906:	4299      	cmp	r1, r3
 8005908:	bfde      	ittt	le
 800590a:	2330      	movle	r3, #48	; 0x30
 800590c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005910:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005914:	1b92      	subs	r2, r2, r6
 8005916:	6122      	str	r2, [r4, #16]
 8005918:	f8cd a000 	str.w	sl, [sp]
 800591c:	464b      	mov	r3, r9
 800591e:	aa03      	add	r2, sp, #12
 8005920:	4621      	mov	r1, r4
 8005922:	4640      	mov	r0, r8
 8005924:	f7ff fee2 	bl	80056ec <_printf_common>
 8005928:	3001      	adds	r0, #1
 800592a:	d14c      	bne.n	80059c6 <_printf_i+0x1fe>
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	b004      	add	sp, #16
 8005932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005936:	4835      	ldr	r0, [pc, #212]	; (8005a0c <_printf_i+0x244>)
 8005938:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	680e      	ldr	r6, [r1, #0]
 8005940:	061f      	lsls	r7, r3, #24
 8005942:	f856 5b04 	ldr.w	r5, [r6], #4
 8005946:	600e      	str	r6, [r1, #0]
 8005948:	d514      	bpl.n	8005974 <_printf_i+0x1ac>
 800594a:	07d9      	lsls	r1, r3, #31
 800594c:	bf44      	itt	mi
 800594e:	f043 0320 	orrmi.w	r3, r3, #32
 8005952:	6023      	strmi	r3, [r4, #0]
 8005954:	b91d      	cbnz	r5, 800595e <_printf_i+0x196>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	f023 0320 	bic.w	r3, r3, #32
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	2310      	movs	r3, #16
 8005960:	e7b0      	b.n	80058c4 <_printf_i+0xfc>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	f043 0320 	orr.w	r3, r3, #32
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	2378      	movs	r3, #120	; 0x78
 800596c:	4828      	ldr	r0, [pc, #160]	; (8005a10 <_printf_i+0x248>)
 800596e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005972:	e7e3      	b.n	800593c <_printf_i+0x174>
 8005974:	065e      	lsls	r6, r3, #25
 8005976:	bf48      	it	mi
 8005978:	b2ad      	uxthmi	r5, r5
 800597a:	e7e6      	b.n	800594a <_printf_i+0x182>
 800597c:	4616      	mov	r6, r2
 800597e:	e7bb      	b.n	80058f8 <_printf_i+0x130>
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	6826      	ldr	r6, [r4, #0]
 8005984:	6960      	ldr	r0, [r4, #20]
 8005986:	1d1d      	adds	r5, r3, #4
 8005988:	600d      	str	r5, [r1, #0]
 800598a:	0635      	lsls	r5, r6, #24
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	d501      	bpl.n	8005994 <_printf_i+0x1cc>
 8005990:	6018      	str	r0, [r3, #0]
 8005992:	e002      	b.n	800599a <_printf_i+0x1d2>
 8005994:	0671      	lsls	r1, r6, #25
 8005996:	d5fb      	bpl.n	8005990 <_printf_i+0x1c8>
 8005998:	8018      	strh	r0, [r3, #0]
 800599a:	2300      	movs	r3, #0
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	4616      	mov	r6, r2
 80059a0:	e7ba      	b.n	8005918 <_printf_i+0x150>
 80059a2:	680b      	ldr	r3, [r1, #0]
 80059a4:	1d1a      	adds	r2, r3, #4
 80059a6:	600a      	str	r2, [r1, #0]
 80059a8:	681e      	ldr	r6, [r3, #0]
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	2100      	movs	r1, #0
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7fa fc0e 	bl	80001d0 <memchr>
 80059b4:	b108      	cbz	r0, 80059ba <_printf_i+0x1f2>
 80059b6:	1b80      	subs	r0, r0, r6
 80059b8:	6060      	str	r0, [r4, #4]
 80059ba:	6863      	ldr	r3, [r4, #4]
 80059bc:	6123      	str	r3, [r4, #16]
 80059be:	2300      	movs	r3, #0
 80059c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c4:	e7a8      	b.n	8005918 <_printf_i+0x150>
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	4632      	mov	r2, r6
 80059ca:	4649      	mov	r1, r9
 80059cc:	4640      	mov	r0, r8
 80059ce:	47d0      	blx	sl
 80059d0:	3001      	adds	r0, #1
 80059d2:	d0ab      	beq.n	800592c <_printf_i+0x164>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	079b      	lsls	r3, r3, #30
 80059d8:	d413      	bmi.n	8005a02 <_printf_i+0x23a>
 80059da:	68e0      	ldr	r0, [r4, #12]
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	4298      	cmp	r0, r3
 80059e0:	bfb8      	it	lt
 80059e2:	4618      	movlt	r0, r3
 80059e4:	e7a4      	b.n	8005930 <_printf_i+0x168>
 80059e6:	2301      	movs	r3, #1
 80059e8:	4632      	mov	r2, r6
 80059ea:	4649      	mov	r1, r9
 80059ec:	4640      	mov	r0, r8
 80059ee:	47d0      	blx	sl
 80059f0:	3001      	adds	r0, #1
 80059f2:	d09b      	beq.n	800592c <_printf_i+0x164>
 80059f4:	3501      	adds	r5, #1
 80059f6:	68e3      	ldr	r3, [r4, #12]
 80059f8:	9903      	ldr	r1, [sp, #12]
 80059fa:	1a5b      	subs	r3, r3, r1
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	dcf2      	bgt.n	80059e6 <_printf_i+0x21e>
 8005a00:	e7eb      	b.n	80059da <_printf_i+0x212>
 8005a02:	2500      	movs	r5, #0
 8005a04:	f104 0619 	add.w	r6, r4, #25
 8005a08:	e7f5      	b.n	80059f6 <_printf_i+0x22e>
 8005a0a:	bf00      	nop
 8005a0c:	08005d85 	.word	0x08005d85
 8005a10:	08005d96 	.word	0x08005d96

08005a14 <_sbrk_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d06      	ldr	r5, [pc, #24]	; (8005a30 <_sbrk_r+0x1c>)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fb fc96 	bl	8001350 <_sbrk>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_sbrk_r+0x1a>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_sbrk_r+0x1a>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200001b8 	.word	0x200001b8

08005a34 <__sread>:
 8005a34:	b510      	push	{r4, lr}
 8005a36:	460c      	mov	r4, r1
 8005a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3c:	f000 f8a0 	bl	8005b80 <_read_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	bfab      	itete	ge
 8005a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a46:	89a3      	ldrhlt	r3, [r4, #12]
 8005a48:	181b      	addge	r3, r3, r0
 8005a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a4e:	bfac      	ite	ge
 8005a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a52:	81a3      	strhlt	r3, [r4, #12]
 8005a54:	bd10      	pop	{r4, pc}

08005a56 <__swrite>:
 8005a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	898b      	ldrh	r3, [r1, #12]
 8005a5e:	05db      	lsls	r3, r3, #23
 8005a60:	4605      	mov	r5, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4616      	mov	r6, r2
 8005a66:	d505      	bpl.n	8005a74 <__swrite+0x1e>
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f000 f868 	bl	8005b44 <_lseek_r>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a7e:	81a3      	strh	r3, [r4, #12]
 8005a80:	4632      	mov	r2, r6
 8005a82:	463b      	mov	r3, r7
 8005a84:	4628      	mov	r0, r5
 8005a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8a:	f000 b817 	b.w	8005abc <_write_r>

08005a8e <__sseek>:
 8005a8e:	b510      	push	{r4, lr}
 8005a90:	460c      	mov	r4, r1
 8005a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a96:	f000 f855 	bl	8005b44 <_lseek_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	bf15      	itete	ne
 8005aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aaa:	81a3      	strheq	r3, [r4, #12]
 8005aac:	bf18      	it	ne
 8005aae:	81a3      	strhne	r3, [r4, #12]
 8005ab0:	bd10      	pop	{r4, pc}

08005ab2 <__sclose>:
 8005ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab6:	f000 b813 	b.w	8005ae0 <_close_r>
	...

08005abc <_write_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	; (8005adc <_write_r+0x20>)
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	4608      	mov	r0, r1
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f7fb fa76 	bl	8000fbc <_write>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_write_r+0x1e>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_write_r+0x1e>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	200001b8 	.word	0x200001b8

08005ae0 <_close_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4d06      	ldr	r5, [pc, #24]	; (8005afc <_close_r+0x1c>)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	f7fb fa92 	bl	8001014 <_close>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_close_r+0x1a>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_close_r+0x1a>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	200001b8 	.word	0x200001b8

08005b00 <_fstat_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	; (8005b20 <_fstat_r+0x20>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	f7fb fad1 	bl	80010b4 <_fstat>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d102      	bne.n	8005b1c <_fstat_r+0x1c>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	b103      	cbz	r3, 8005b1c <_fstat_r+0x1c>
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	200001b8 	.word	0x200001b8

08005b24 <_isatty_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d06      	ldr	r5, [pc, #24]	; (8005b40 <_isatty_r+0x1c>)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	f7fb fa2e 	bl	8000f90 <_isatty>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d102      	bne.n	8005b3e <_isatty_r+0x1a>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	b103      	cbz	r3, 8005b3e <_isatty_r+0x1a>
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	200001b8 	.word	0x200001b8

08005b44 <_lseek_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4d07      	ldr	r5, [pc, #28]	; (8005b64 <_lseek_r+0x20>)
 8005b48:	4604      	mov	r4, r0
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	2200      	movs	r2, #0
 8005b50:	602a      	str	r2, [r5, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f7fb fa75 	bl	8001042 <_lseek>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_lseek_r+0x1e>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_lseek_r+0x1e>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	200001b8 	.word	0x200001b8

08005b68 <__malloc_lock>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__malloc_lock+0x8>)
 8005b6a:	f7ff bb4d 	b.w	8005208 <__retarget_lock_acquire_recursive>
 8005b6e:	bf00      	nop
 8005b70:	200001b0 	.word	0x200001b0

08005b74 <__malloc_unlock>:
 8005b74:	4801      	ldr	r0, [pc, #4]	; (8005b7c <__malloc_unlock+0x8>)
 8005b76:	f7ff bb48 	b.w	800520a <__retarget_lock_release_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	200001b0 	.word	0x200001b0

08005b80 <_read_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4d07      	ldr	r5, [pc, #28]	; (8005ba0 <_read_r+0x20>)
 8005b84:	4604      	mov	r4, r0
 8005b86:	4608      	mov	r0, r1
 8005b88:	4611      	mov	r1, r2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f7fb fa68 	bl	8001064 <_read>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_read_r+0x1e>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_read_r+0x1e>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	200001b8 	.word	0x200001b8

08005ba4 <_init>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	bf00      	nop
 8005ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005baa:	bc08      	pop	{r3}
 8005bac:	469e      	mov	lr, r3
 8005bae:	4770      	bx	lr

08005bb0 <_fini>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr
